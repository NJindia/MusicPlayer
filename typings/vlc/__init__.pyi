"""
This type stub file was generated by pyright.
"""

import ctypes
import functools
import inspect as _inspect
import logging
import os
import sys
from collections.abc import Callable, Sequence
from ctypes.util import find_library
from msvcrt import getch
from os import PathLike
from pathlib import Path
from typing import Literal, Any, Iterator

"""This module provides bindings for the LibVLC public API, see
https://wiki.videolan.org/LibVLC.

You can find the documentation and a README file with some examples
at https://www.olivieraubert.net/vlc/python-ctypes/.

Basically, the most important class is :class:`Instance`, which is used
to create a libvlc instance. From this instance, you then create
:class:`MediaPlayer` and :class:`MediaListPlayer` instances.

Alternatively, you may create instances of the :class:`MediaPlayer` and
:class:`MediaListPlayer` class directly and an instance of :class:`Instance`
will be implicitly created. The latter can be obtained using the
:meth:`MediaPlayer.get_instance` and :class:`MediaListPlayer`.
"""
logger = ...
__version__ = ...
__libvlc_version__ = ...
__generator_version__ = ...
build_date = ...
DEFAULT_ENCODING = ...
Success = Literal[0, -1]
MRL = str | bytes | Path

def str_to_bytes(s):  # -> bytes:
    """Translate string or bytes to bytes."""
    ...

def bytes_to_str(b):  # -> str:
    """Translate bytes to string."""
    ...

def len_args(func):  # -> int:
    """Return number of positional arguments."""
    ...

_internal_guard = ...

def find_lib():  # -> tuple[CDLL, str | None] | tuple[CDLL, str | Any | LiteralString | None]:
    ...

class VLCException(Exception):
    """Exception raised by libvlc methods."""

    ...

_Ints = ...
_Seqs = ...

class memoize_parameterless:
    """Decorator. Caches a parameterless method's return value each time it is called.

    If called later with the same arguments, the cached value is returned (not reevaluated).

    Adapted from https://wiki.python.org/moin/PythonDecoratorLibrary.
    """
    def __init__(self, func) -> None: ...
    def __call__(self, obj): ...
    def __repr__(self):
        """Return the function's docstring."""
        ...

    def __get__(self, obj, objtype):  # -> partial[Any]:
        """Support instance methods."""
        ...

_default_instance = ...

def get_default_instance():  # -> Any | None:
    """Returns the default :class:`Instance`."""
    ...

def try_fspath(path):
    """Try calling ``os.fspath``.

    ``os.fspath`` is only available from py3.6.
    """
    ...

_Cfunctions = ...
_Globals = ...

class _Cstruct(ctypes.Structure):
    """(INTERNAL) Base class for ctypes structures."""

    _fields_ = ...
    def __str__(self) -> str: ...
    def __repr__(self):  # -> str:
        ...

class _Ctype:
    """(INTERNAL) Base class for ctypes."""
    @staticmethod
    def from_param(this):  # -> None:
        """(INTERNAL) ctypes parameter conversion method."""
        ...

class ListPOINTER:
    """Just like a POINTER but accept a list of etype elements as an argument."""
    def __init__(self, etype) -> None: ...
    def from_param(self, param): ...

def string_result(result, func, arguments):  # -> str | None:
    """Errcheck function. Returns a string and frees the original pointer.

    It assumes the result is a ``char*``.
    """
    ...

def class_result(classname):  # -> Callable[..., Any | None]:
    """Errcheck function. Returns a function that creates the specified class."""
    ...

class Log(ctypes.Structure): ...

Log_ptr = ...

class MediaThumbnailRequest:
    def __new__(cls, *args):  # -> None:
        ...

class FILE(ctypes.Structure): ...

FILE_ptr = ...
PyFile_FromFd = ...
PyFile_AsFd = ...

def module_description_list(head):  # -> list[Any]:
    """Convert a ModuleDescription linked list to a Python list (and release the former)."""
    ...

def track_description_list(head):  # -> list[Any]:
    """Convert a TrackDescription linked list to a Python list (and release the former)."""
    ...

class _Enum(ctypes.c_uint):
    """(INTERNAL) Base class"""

    _enum_names_ = ...
    def __str__(self) -> str: ...
    def __hash__(self) -> int: ...
    def __repr__(self):  # -> str:
        ...
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...

class AudioEqualizer(_Ctype):
    """Create a new default equalizer, with all frequency values zeroed.

    The new equalizer can subsequently be applied to a media player by invoking
    :meth:`MediaPlayer.set_equalizer`.

    The returned handle should be freed via :meth:`release` when
    it is no longer needed.

    """
    def __new__(cls, *args):  # -> Any | None:
        ...
    def get_amp_at_index(self, u_band):  # -> Any:
        """Get the amplification value for a particular equalizer frequency band.

        :param u_band: index, counting from zero, of the frequency band to get.

        :return: amplification value (Hz); NaN if there is no such frequency band.
        :version: LibVLC 2.2.0 or later.
        """
        ...

    def get_preamp(self):  # -> Any:
        """Get the current pre-amplification value from an equalizer.

        :return: preamp value (Hz).
        :version: LibVLC 2.2.0 or later.
        """
        ...

    def release(self):  # -> Any:
        """Release a previously created equalizer instance.

        The equalizer was previously created by using :func:`new` or
        :func:`new_from_preset`.

        It is safe to invoke this method with a None *p_equalizer* parameter for no effect.

        :version: LibVLC 2.2.0 or later.
        """
        ...

    def set_amp_at_index(self, f_amp, u_band):  # -> Any:
        """Set a new amplification value for a particular equalizer frequency band.

        The new equalizer settings are subsequently applied to a media player by invoking
        :func:`media_player_set_equalizer`.

        The supplied amplification value will be clamped to the -20.0 to +20.0 range.

        :param f_amp: amplification value (-20.0 to 20.0 Hz).
        :param u_band: index, counting from zero, of the frequency band to set.

        :return: zero on success, -1 on error.
        :version: LibVLC 2.2.0 or later.
        """
        ...

    def set_preamp(self, f_preamp):  # -> Any:
        """Set a new pre-amplification value for an equalizer.

        The new equalizer settings are subsequently applied to a media player by invoking
        :func:`media_player_set_equalizer`.

        The supplied amplification value will be clamped to the -20.0 to +20.0 range.

        :param f_preamp: preamp value (-20.0 to 20.0 Hz).

        :return: zero on success, -1 on error.
        :version: LibVLC 2.2.0 or later.
        """
        ...

class EventManager(_Ctype):
    """Create an event manager with callback handler.

    This class interposes the registration and handling of
    event notifications in order to (a) remove the need for
    decorating each callback functions with the decorator
    ``@callbackmethod``, (b) allow any number of positional
    and/or keyword arguments to the callback (in addition
    to the :class:`Event` instance) and (c) to preserve the Python
    objects such that the callback and argument objects
    remain alive (i.e. are not garbage collected) until
    **after** the notification has been unregistered.

    .. note::
        Only a single notification can be registered
        for each event type in an :class:`EventManager` instance.

    """

    _callback_handler = ...
    _callbacks = ...
    def __new__(cls, ptr=...):  # -> None:
        ...
    def event_attach(
        self, eventtype: EventType, callback: Callable[[Any], None], *args: Any, **kwds: Any
    ) -> Literal[0] | Exception:
        """Register an event notification.

        :param eventtype: the desired event type to be notified about.
        :param callback: the function to call when the event occurs.
        :param args: optional positional arguments for the callback.
        :param kwdsmedia_list_new: optional keyword arguments for the callback.

        :return: 0 on success, ENOMEM on error.

        .. note::
            The callback function must have at least one argument,
            an :class:`Event` instance. Any other, optional positional and keyword
            arguments are in **addition** to the first one.

        .. warning::
            LibVLC is not reentrant, i.e. you cannot call libvlc functions from an event handler.
            They must be called from the main application thread.
        """
        ...

    def event_detach(self, eventtype: EventType) -> None:
        """Unregister an event notification.

        :param eventtype: the event type notification to be removed.
        """
        ...

class Instance(_Ctype):
    """It may take as parameter either:

    * a string
    * a list of strings as first parameters
    * the parameters given as the constructor parameters (must be strings)

    """
    def __new__(cls, *args):  # -> Any | None:
        ...
    def media_player_new(self, uri=...):  # -> Any:
        """Create a new :class:`MediaPlayer` instance.

        :param uri: an optional URI to play in the player as a str, bytes or PathLike object.
        """
        ...

    def media_list_player_new(self) -> MediaListPlayer:
        """Create a new :class:`MediaListPlayer` instance."""
        ...

    def media_new(self, mrl, *options):  # -> Any:
        """Create a new :class:`Media` instance.

        If mrl contains a colon (:) preceded by more than 1 letter, it
        will be treated as a URL. Else, it will be considered as a
        local path. If you need more control, directly use
        :meth:`media_new_location` or :meth:`media_new_path`.

        Options can be specified as supplementary string parameters,
        but note that many options cannot be set at the media level,
        and rather at the :class:`Instance` level. For instance, the marquee
        filter must be specified when creating the :class:`Instance` or
        :class:`MediaPlayer`.

        Alternatively, options can be added to the media using the
        :meth:`Media.add_options` method (with the same limitation).

        :param mrl: A str, bytes or PathLike object
        :param options: optional media option=value strings
        """
        ...

    def media_new_path(self, path):  # -> Any:
        """Create a media for a certain file path. See :meth:`media_release`.

        :param path: A str, byte, or PathLike object representing a local filesystem path.

        :return: the newly created media or None on error.
        """
        ...

    def media_list_new(self, mrls: Sequence[MRL] | None = None) -> MediaList:
        """Create a new :class:`MediaList` instance.

        :param mrls: optional list of MRL strings, bytes, or PathLike objects.
        """
        ...

    def audio_output_enumerate_devices(self):  # -> list[Any]:
        """Enumerate the defined audio output devices.

        :return: list of dicts {name:, description:, devices:}
        """
        ...

    def audio_filter_list_get(self):  # -> list[Any]:
        """Returns a list of available audio filters."""
        ...

    def video_filter_list_get(self):  # -> list[Any]:
        """Returns a list of available video filters."""
        ...

    def add_intf(self, name):  # -> Any:
        """Try to start a user interface for the libvlc instance.

        :param name: interface name, or None for default.

        :return: 0 on success, -1 on error.
        """
        ...

    def audio_output_device_count(self, psz_audio_output):  # -> Any:
        """Backward compatibility stub. Do not use in new code.

        .. warning:: **Deprecated!** Use :func:`audio_output_device_list_get` instead.

        :return: always 0.
        """
        ...

    def audio_output_device_id(self, psz_audio_output, i_device):  # -> Any:
        """Backward compatibility stub. Do not use in new code.

        .. warning:: **Deprecated!** Use :func:`audio_output_device_list_get` instead.

        :return: always None.
        """
        ...

    def audio_output_device_list_get(self, aout):  # -> Any:
        """Gets a list of audio output devices for a given audio output module,
        See :func:`audio_output_device_set`.

        .. note:: Not all audio outputs support this. In particular, an empty (None)
            list of devices does **not** imply that the specified audio output does
            not work.

        .. note:: The list might not be exhaustive.

        .. warning:: Some audio output devices in the list might not actually work in
            some circumstances. By default, it is recommended to not specify any
            explicit audio device.

        :param aout: audio output name.
            (as returned by libvlc_audio_output_list_get).

        :return: A None-terminated linked list of potential audio output devices.
            It must be freed with :func:`audio_output_device_list_release`.
        :version: LibVLC 2.1.0 or later.
        """
        ...

    def audio_output_device_longname(self, psz_output, i_device):  # -> Any:
        """Backward compatibility stub. Do not use in new code.

        .. warning:: **Deprecated!** Use :func:`audio_output_device_list_get` instead.

        :return: always None.
        """
        ...

    def audio_output_list_get(self):  # -> Any:
        """Gets the list of available audio output modules.

        :return: list of available audio outputs. It must be freed with.
            See :func:`audio_output_list_release` See :class:`AudioOutput` .
            In case of error, None is returned.
        """
        ...

    def dialog_set_callbacks(self, p_cbs, p_data):  # -> Any:
        """Register callbacks in order to handle VLC dialogs

        :param p_data: opaque pointer for the callback.

        :version: LibVLC 3.0.0 and later.
        """
        ...

    def get_log_verbosity(self):  # -> Any:
        """Always returns minus one.
        This function is only provided for backward compatibility.

        :return: always -1.
        """
        ...

    def log_open(self):  # -> Any:
        """This function does nothing useful.
        It is only provided for backward compatibility.

        :return: an unique pointer or None on error.
        """
        ...

    def log_set(self, cb, data):  # -> Any:
        """Sets the logging callback for a LibVLC instance.

        This function is thread-safe: it will wait for any pending callbacks
        invocation to complete.

        .. note:: Some log messages (especially debug) are emitted by LibVLC while
            is being initialized. These messages cannot be captured with this interface.

        .. warning:: A deadlock may occur if this function is called from the callback.

        :param data: opaque data pointer for the callback function.

        :param p_instance: libvlc instance.

        :version: LibVLC 2.1.0 or later.
        """
        ...

    def log_set_file(self, stream):  # -> Any:
        """Sets up logging to a file.

        :param stream: FILE pointer opened for writing.
            (the FILE pointer must remain valid until libvlc_log_unset).

        :version: LibVLC 2.1.0 or later.
        """
        ...

    def log_unset(self):  # -> Any:
        """Unsets the logging callback.

        This function deregisters the logging callback for a LibVLC instance.
        This is rarely needed as the callback is implicitly unset when the instance
        is destroyed.

        .. note:: This function will wait for any pending callbacks invocation to
            complete (causing a deadlock if called from within the callback).

        :version: LibVLC 2.1.0 or later.
        """
        ...

    def media_discoverer_list_get(self, i_cat, ppp_services):  # -> Any:
        """Get media discoverer services by category

        :param i_cat: category of services to fetch.
        :param ppp_services: address to store an allocated array of media discoverer.
            services (must be freed with :func:`media_discoverer_list_release` by.
            the caller) [OUT].

        :return: the number of media discoverer services (0 on error).
        :version: LibVLC 3.0.0 and later.
        """
        ...

    def media_discoverer_new(self, psz_name):  # -> Any:
        """Create a media discoverer object by name.

        After this object is created, you should attach to media_list events in
        order to be notified of new items discovered.

        You need to call :func:`media_discoverer_start` in order to start the
        discovery.

        See :func:`media_discoverer_media_list`
        See :func:`media_discoverer_event_manager`
        See :func:`media_discoverer_start`

        :param psz_name: service name; use :func:`media_discoverer_list_get` to get.
            a list of the discoverer names available in this libVLC instance.

        :return: media discover object or None in case of error.
        :version: LibVLC 3.0.0 or later.
        """
        ...

    def media_discoverer_new_from_name(self, psz_name):  # -> Any:
        """.. warning:: **Deprecated!** Use :func:`media_discoverer_new` and :func:`media_discoverer_start`."""
        ...

    def media_library_new(self):  # -> Any:
        """Create an new Media Library object

        :return: a new object or None on error.
        """
        ...

    def media_new_as_node(self, psz_name):  # -> Any:
        """Create a media as an empty node with a given name.

        See :func:`media_release`

        :param psz_name: the name of the node.

        :return: the new empty media or None on error.
        """
        ...

    def media_new_callbacks(self, open_cb, read_cb, seek_cb, close_cb, opaque):  # -> Any:
        """Create a media with custom callbacks to read the data from.

        .. note:: If *open_cb* is None, the *opaque* pointer will be passed to *read_cb*,
            *seek_cb* and *close_cb*, and the stream size will be treated as unknown.

        .. note:: The callbacks may be called asynchronously (from another thread).
            A single stream *instance* need not be reentrant. However the *open_cb* needs to
            be reentrant if the media is used by multiple player instances.

        .. warning:: The callbacks may be used until all or any player instances
            that were supplied the media item are stopped.

        See :func:`media_release`

        :param open_cb: callback to open the custom bitstream input media.
        :param read_cb: callback to read data (must not be None).
        :param seek_cb: callback to seek, or None if seeking is not supported.
        :param close_cb: callback to close the media, or None if unnecessary.
        :param opaque: data pointer for the open callback.

        :return: the newly created media or None on error.

        :version: LibVLC 3.0.0 and later.
        """
        ...

    def media_new_fd(self, fd):  # -> Any:
        """Create a media for an already open file descriptor.
        The file descriptor shall be open for reading (or reading and writing).

        Regular file descriptors, pipe read descriptors and character device
        descriptors (including TTYs) are supported on all platforms.
        Block device descriptors are supported where available.
        Directory descriptors are supported on systems that provide fdopendir().
        Sockets are supported on all platforms where they are file descriptors,
        i.e. all except Windows.

        .. note:: This library will **not** automatically close the file descriptor
            under any circumstance. Nevertheless, a file descriptor can usually only be
            rendered once in a media player. To render it a second time, the file
            descriptor should probably be rewound to the beginning with lseek().

        See :func:`media_release`

        :param fd: open file descriptor.

        :return: the newly created media or None on error.
        :version: LibVLC 1.1.5 and later.
        """
        ...

    def media_new_location(self, psz_mrl):  # -> Any:
        """Create a media with a certain given media resource location,
        for instance a valid URL.

        .. note:: To refer to a local file with this function,
            the file://... URI syntax **must** be used (see IETF RFC3986).
            We recommend using :func:`media_new_path` instead when dealing with
            local files.

        See :func:`media_release`

        :param psz_mrl: the media location.

        :return: the newly created media or None on error.
        """
        ...

    def playlist_play(self, i_id, i_options, ppsz_options):  # -> Any:
        """Start playing (if there is any item in the playlist).

        Additionnal playlist item options can be specified for addition to the
        item before it is played.

        :param i_id: the item to play. If this is a negative number, the next.
            item will be selected. Otherwise, the item with the given ID will be.
            played.
        :param i_options: the number of options to add to the item.
        :param ppsz_options: the options to add to the item.
        """
        ...

    def release(self):  # -> Any:
        """Decrement the reference count of a libvlc instance, and destroy it
        if it reaches zero.
        """
        ...

    def renderer_discoverer_list_get(self, ppp_services):  # -> Any:
        """Get media discoverer services

        See libvlc_renderer_list_release

        :param ppp_services: address to store an allocated array of renderer.
            discoverer services (must be freed with libvlc_renderer_list_release by.
            the caller) [OUT].

        :return: the number of media discoverer services (0 on error).
        :version: LibVLC 3.0.0 and later.
        """
        ...

    def renderer_discoverer_new(self, psz_name):  # -> Any:
        """Create a renderer discoverer object by name

        After this object is created, you should attach to events in order to be
        notified of the discoverer events.

        You need to call :func:`renderer_discoverer_start` in order to start the
        discovery.

        See :func:`renderer_discoverer_event_manager`
        See :func:`renderer_discoverer_start`

        :param psz_name: service name; use :func:`renderer_discoverer_list_get` to.
            get a list of the discoverer names available in this libVLC instance.

        :return: media discover object or None in case of error.
        :version: LibVLC 3.0.0 or later.
        """
        ...

    def retain(self):  # -> Any:
        """Increments the reference count of a libvlc instance.
        The initial reference count is 1 after :func:`new` returns.
        """
        ...

    def set_app_id(self, id, version, icon):  # -> Any:
        """Sets some meta-information about the application.
        See also :func:`set_user_agent`.

        :param id: Java-style application identifier, e.g. "com.acme.foobar".
        :param version: application version numbers, e.g. "1.2.3".
        :param icon: application icon name, e.g. "foobar".

        :version: LibVLC 2.1.0 or later.
        """
        ...

    def set_exit_handler(self, cb, opaque):  # -> Any:
        """Registers a callback for the LibVLC exit event. This is mostly useful if
        the VLC playlist and/or at least one interface are started with
        :func:`playlist_play` or :func:`add_intf` respectively.
        Typically, this function will wake up your application main loop (from
        another thread).

        .. note:: This function should be called before the playlist or interface are
            started. Otherwise, there is a small race condition: the exit event could
            be raised before the handler is registered.

        .. warning:: This function and :func:`wait` cannot be used at the same time.

        :param cb: callback to invoke when LibVLC wants to exit,
            or None to disable the exit handler (as by default).
        :param opaque: data pointer for the callback.
        """
        ...

    def set_log_verbosity(self, level):  # -> Any:
        """This function does nothing.
        It is only provided for backward compatibility.

        :param level: ignored.
        """
        ...

    def set_user_agent(self, name, http):  # -> Any:
        """Sets the application *name*. LibVLC passes this as the user agent string
        when a protocol requires it.

        :param name: human-readable application name, e.g. "FooBar player 1.2.3".
        :param http: HTTP User Agent, e.g. "FooBar/1.2.3 Python/2.6.0".

        :version: LibVLC 1.1.1 or later.
        """
        ...

    def vlm_add_broadcast(self, psz_name, psz_input, psz_output, i_options, ppsz_options, b_enabled, b_loop):  # -> Any:
        """Add a broadcast, with one input.

        :param psz_name: the name of the new broadcast.
        :param psz_input: the input MRL.
        :param psz_output: the output MRL (the parameter to the "sout" variable).
        :param i_options: number of additional options.
        :param ppsz_options: additional options.
        :param b_enabled: boolean for enabling the new broadcast.
        :param b_loop: Should this broadcast be played in loop ?

        :return: 0 on success, -1 on error.
        """
        ...

    def vlm_add_input(self, psz_name, psz_input):  # -> Any:
        """Add a media's input MRL. This will add the specified one.

        :param psz_name: the media to work on.
        :param psz_input: the input MRL.

        :return: 0 on success, -1 on error.
        """
        ...

    def vlm_add_vod(self, psz_name, psz_input, i_options, ppsz_options, b_enabled, psz_mux):  # -> Any:
        """Add a vod, with one input.

        :param psz_name: the name of the new vod media.
        :param psz_input: the input MRL.
        :param i_options: number of additional options.
        :param ppsz_options: additional options.
        :param b_enabled: boolean for enabling the new vod.
        :param psz_mux: the muxer of the vod media.

        :return: 0 on success, -1 on error.
        """
        ...

    def vlm_change_media(self, psz_name, psz_input, psz_output, i_options, ppsz_options, b_enabled, b_loop):  # -> Any:
        """Edit the parameters of a media. This will delete all existing inputs and
        add the specified one.

        :param psz_name: the name of the new broadcast.
        :param psz_input: the input MRL.
        :param psz_output: the output MRL (the parameter to the "sout" variable).
        :param i_options: number of additional options.
        :param ppsz_options: additional options.
        :param b_enabled: boolean for enabling the new broadcast.
        :param b_loop: Should this broadcast be played in loop ?

        :return: 0 on success, -1 on error.
        """
        ...

    def vlm_del_media(self, psz_name):  # -> Any:
        """Delete a media (VOD or broadcast).

        :param psz_name: the media to delete.

        :return: 0 on success, -1 on error.
        """
        ...

    @memoize_parameterless
    def vlm_get_event_manager(self):  # -> Any:
        """Get libvlc_event_manager from a vlm media.
        The p_event_manager is immutable, so you don't have to hold the lock

        :return: libvlc_event_manager.
        """
        ...

    def vlm_get_media_instance_length(self, psz_name, i_instance):  # -> Any:
        """Get vlm_media instance length by name or instance id

        :param psz_name: name of vlm media instance.
        :param i_instance: instance id.

        :return: length of media item or -1 on error.
        """
        ...

    def vlm_get_media_instance_position(self, psz_name, i_instance):  # -> Any:
        """Get vlm_media instance position by name or instance id

        :param psz_name: name of vlm media instance.
        :param i_instance: instance id.

        :return: position as float or -1. on error.
        """
        ...

    def vlm_get_media_instance_rate(self, psz_name, i_instance):  # -> Any:
        """Get vlm_media instance playback rate by name or instance id

        :param psz_name: name of vlm media instance.
        :param i_instance: instance id.

        :return: playback rate or -1 on error.
        """
        ...

    def vlm_get_media_instance_time(self, psz_name, i_instance):  # -> Any:
        """Get vlm_media instance time by name or instance id

        :param psz_name: name of vlm media instance.
        :param i_instance: instance id.

        :return: time as integer or -1 on error.
        """
        ...

    def vlm_pause_media(self, psz_name):  # -> Any:
        """Pause the named broadcast.

        :param psz_name: the name of the broadcast.

        :return: 0 on success, -1 on error.
        """
        ...

    def vlm_play_media(self, psz_name):  # -> Any:
        """Play the named broadcast.

        :param psz_name: the name of the broadcast.

        :return: 0 on success, -1 on error.
        """
        ...

    def vlm_release(self):  # -> Any:
        """Release the vlm instance related to the given :class:`Instance`"""
        ...

    def vlm_seek_media(self, psz_name, f_percentage):  # -> Any:
        """Seek in the named broadcast.

        :param psz_name: the name of the broadcast.
        :param f_percentage: the percentage to seek to.

        :return: 0 on success, -1 on error.
        """
        ...

    def vlm_set_enabled(self, psz_name, b_enabled):  # -> Any:
        """Enable or disable a media (VOD or broadcast).

        :param psz_name: the media to work on.
        :param b_enabled: the new status.

        :return: 0 on success, -1 on error.
        """
        ...

    def vlm_set_input(self, psz_name, psz_input):  # -> Any:
        """Set a media's input MRL. This will delete all existing inputs and
        add the specified one.

        :param psz_name: the media to work on.
        :param psz_input: the input MRL.

        :return: 0 on success, -1 on error.
        """
        ...

    def vlm_set_loop(self, psz_name, b_loop):  # -> Any:
        """Set a media's loop status.

        :param psz_name: the media to work on.
        :param b_loop: the new status.

        :return: 0 on success, -1 on error.
        """
        ...

    def vlm_set_mux(self, psz_name, psz_mux):  # -> Any:
        """Set a media's vod muxer.

        :param psz_name: the media to work on.
        :param psz_mux: the new muxer.

        :return: 0 on success, -1 on error.
        """
        ...

    def vlm_set_output(self, psz_name, psz_output):  # -> Any:
        """Set the output for a media.

        :param psz_name: the media to work on.
        :param psz_output: the output MRL (the parameter to the "sout" variable).

        :return: 0 on success, -1 on error.
        """
        ...

    def vlm_show_media(self, psz_name):  # -> Any:
        """Return information about the named media as a JSON
        string representation.

        This function is mainly intended for debugging use,
        if you want programmatic access to the state of
        a vlm_media_instance_t, please use the corresponding
        libvlc_vlm_get_media_instance_xxx -functions.
        Currently there are no such functions available for
        vlm_media_t though.

        :param psz_name: the name of the media,
            if the name is an empty string, all media is described.

        :return: string with information about named media, or None on error.
        """
        ...

    def vlm_stop_media(self, psz_name):  # -> Any:
        """Stop the named broadcast.

        :param psz_name: the name of the broadcast.

        :return: 0 on success, -1 on error.
        """
        ...

    def wait(self):  # -> Any:
        """Waits until an interface causes the instance to exit.
        You should start at least one interface first, using :func:`add_intf`.

        .. warning:: This function wastes one thread doing basically nothing.
            :func:`set_exit_handler` should be used instead.
        """
        ...

class LogIterator(_Ctype):
    """Create a new VLC log iterator."""
    def __new__(cls, ptr=...):  # -> None:
        """(INTERNAL) ctypes wrapper constructor."""
        ...

    def __iter__(self):  # -> Self:
        ...
    def next(self):  # -> Any:
        ...
    def __next__(self):  # -> Any:
        ...
    def free(self):  # -> Any:
        """Frees memory allocated by :func:`log_get_iterator`."""
        ...

    def has_next(self):  # -> Any:
        """Always returns zero.
        This function is only provided for backward compatibility.

        :return: always zero.
        """
        ...

class Media(_Ctype):
    """Usage:

    .. code-block:: python

        Media(MRL, *options)

    See :meth:`Instance.media_new` documentation for details.

    """
    def __new__(cls, *args):  # -> Any | None:
        ...
    def get_instance(self):  # -> Any | None:
        ...
    def add_options(self, *options):  # -> None:
        """Add a list of options to the media.

        .. note::
            Options must be written without the double-dash.

        .. warning::
            Most audio and video options, such as text renderer, have no
            effects on an individual media. These options must be set at
            the :class:`Instance` or :class:`MediaPlayer` instanciation.

        :param options: optional media option=value strings
        """
        ...

    def tracks_get(self):  # -> Generator[Any, None, None] | None:
        """Get media descriptor's elementary streams description.

        .. note::
            You need to call :meth:`parse` or play the media at least once
            before calling this function.
            Not doing this will result in an empty array.

        .. note::
            The result must be freed with :meth:`tracks_release`.

        :version: LibVLC 2.1.0 and later.
        """
        ...

    def add_option(self, psz_options):  # -> Any:
        """Add an option to the media.

        This option will be used to determine how the media_player will
        read the media. This allows to use VLC's advanced
        reading/streaming options on a per-media basis.

        .. note:: The options are listed in 'vlc --long-help' from the command line,
            e.g. "-sout-all". Keep in mind that available options and their semantics
            vary across LibVLC versions and builds.
        .. warning:: Not all options affects :class:`Media` objects:
            Specifically, due to architectural issues most audio and video options,
            such as text renderer options, have no effects on an individual media.
            These options must be set through :func:`new` instead.

        :param psz_options: the options (as a string).
        """
        ...

    def add_option_flag(self, psz_options, i_flags):  # -> Any:
        """Add an option to the media with configurable flags.

        This option will be used to determine how the media_player will
        read the media. This allows to use VLC's advanced
        reading/streaming options on a per-media basis.

        The options are detailed in vlc --long-help, for instance
        "--sout-all". Note that all options are not usable on medias:
        specifically, due to architectural issues, video-related options
        such as text renderer options cannot be set on a single media. They
        must be set on the whole libvlc instance instead.

        :param psz_options: the options (as a string).
        :param i_flags: the flags for this option.
        """
        ...

    def duplicate(self):  # -> Any:
        """Duplicate a media descriptor object."""
        ...

    @memoize_parameterless
    def event_manager(self) -> EventManager:
        """Get event manager from media descriptor object.
        NOTE: this function doesn't increment reference counting.

        :return: event manager object.
        """
        ...

    def get_duration(self) -> int:
        """Get duration (in ms) of media descriptor object item.

        :return: duration of media item or -1 on error.
        """
        ...

    def get_meta(self, e_meta):  # -> Any:
        """Read the meta of the media.

        If the media has not yet been parsed this will return None.

        See :func:`parse`
        See :func:`parse_with_options`
        See libvlc_MediaMetaChanged

        :param e_meta: the meta to read.

        :return: the media's meta.
        """
        ...

    def get_mrl(self) -> str:
        """Get the media resource locator (mrl) from a media descriptor object

        :return: string with mrl of media descriptor object.
        """
        ...

    def get_parsed_status(self):  # -> Any:
        """Get Parsed status for media descriptor object.

        See libvlc_MediaParsedChanged
        See :class:`MediaParsedStatus`

        :return: a value of the :class:`MediaParsedStatus` enum.
        :version: LibVLC 3.0.0 or later.
        """
        ...

    def get_state(self):  # -> Any:
        """Get current state of media descriptor object. Possible media states are
        libvlc_NothingSpecial=0, libvlc_Opening, libvlc_Playing, libvlc_Paused,
        libvlc_Stopped, libvlc_Ended, libvlc_Error.

        See :class:`State`.

        :return: state of media descriptor object.
        """
        ...

    def get_stats(self, p_stats):  # -> Any:
        """Get the current statistics about the media.

        :param p_stats:: structure that contain the statistics about the media.
            (this structure must be allocated by the caller).

        :return: true if the statistics are available, false otherwise.
        """
        ...

    def get_tracks_info(self):  # -> Any:
        """Get media descriptor's elementary streams description

        Note, you need to call :func:`parse` or play the media at least once
        before calling this function.
        Not doing this will result in an empty array.


        .. warning:: **Deprecated!** Use :func:`tracks_get` instead

        :param tracks: address to store an allocated array of Elementary Streams.
            descriptions (must be freed by the caller) [OUT].

        :return: the number of Elementary Streams.
        """
        ...

    def get_type(self):  # -> Any:
        """Get the media type of the media descriptor object

        See :class:`MediaType`

        :return: media type.
        :version: LibVLC 3.0.0 and later.
        """
        ...

    def get_user_data(self):  # -> Any:
        """Get media descriptor's user_data. user_data is specialized data
        accessed by the host application, VLC.framework uses it as a pointer to
        an native object that references a :class:`Media` pointer
        """
        ...

    def is_parsed(self):  # -> Any:
        """Return true is the media descriptor object is parsed


        .. warning:: **Deprecated!** This can return true in case of failure.
            Use :func:`get_parsed_status` instead

        See libvlc_MediaParsedChanged

        :return: true if media object has been parsed otherwise it returns false.
        """
        ...

    def parse(self):  # -> Any:
        """Parse a media.

        This fetches (local) art, meta data and tracks information.
        The method is synchronous.


        .. warning:: **Deprecated!** This function could block indefinitely.
            Use :func:`parse_with_options` instead

        See :func:`parse_with_options`
        See :func:`get_meta`
        See :func:`get_tracks_info`
        """
        ...

    def parse_async(self):  # -> Any:
        """Parse a media.

        This fetches (local) art, meta data and tracks information.
        The method is the asynchronous of :func:`parse`.

        To track when this is over you can listen to libvlc_MediaParsedChanged
        event. However if the media was already parsed you will not receive this
        event.


        .. warning:: **Deprecated!** You can't be sure to receive the libvlc_MediaParsedChanged
            event (you can wait indefinitely for this event).
            Use :func:`parse_with_options` instead

        See :func:`parse`
        See libvlc_MediaParsedChanged
        See :func:`get_meta`
        See :func:`get_tracks_info`
        """
        ...

    def parse_stop(self):  # -> Any:
        """Stop the parsing of the media

        When the media parsing is stopped, the libvlc_MediaParsedChanged event will
        be sent with the libvlc_media_parsed_status_timeout status.

        See :func:`parse_with_options`

        :version: LibVLC 3.0.0 or later.
        """
        ...

    def parse_with_options(self, parse_flag, timeout):  # -> Any:
        """Parse the media asynchronously with options.

        This fetches (local or network) art, meta data and/or tracks information.
        This method is the extended version of :func:`parse_with_options`.

        To track when this is over you can listen to libvlc_MediaParsedChanged
        event. However if this functions returns an error, you will not receive any
        events.

        It uses a flag to specify parse options (see libvlc_media_parse_flag_t). All
        these flags can be combined. By default, media is parsed if it's a local
        file.

        .. note:: Parsing can be aborted with :func:`parse_stop`.

        See libvlc_MediaParsedChanged
        See :func:`get_meta`
        See :func:`tracks_get`
        See :func:`get_parsed_status`
        See :class:`MediaParseFlag`

        :param parse_flag: parse options:
        :param timeout: maximum time allowed to preparse the media. If -1, the.
            default "preparse-timeout" option will be used as a timeout. If 0, it will.
            wait indefinitely. If > 0, the timeout will be used (in milliseconds).

        :return: -1 in case of error, 0 otherwise.
        :version: LibVLC 3.0.0 or later.
        """
        ...

    def player_new_from_media(self):  # -> Any:
        """Create a Media Player object from a Media

            destroyed.

        :return: a new media player object, or None on error.
        """
        ...

    def release(self):  # -> Any:
        """Decrement the reference count of a media descriptor object. If the
        reference count is 0, then :func:`release` will release the
        media descriptor object. It will send out an libvlc_MediaFreed event
        to all listeners. If the media descriptor object has been released it
        should not be used again.
        """
        ...

    def retain(self):  # -> Any:
        """Retain a reference to a media descriptor object (libvlc_media_t). Use
        :func:`release` to decrement the reference count of a
        media descriptor object.
        """
        ...

    def save_meta(self):  # -> Any:
        """Save the meta previously set

        :return: true if the write operation was successful.
        """
        ...

    def set_meta(self, e_meta, psz_value):  # -> Any:
        """Set the meta of the media (this function will not save the meta, call
        :func:`save_meta` in order to save the meta)

        :param e_meta: the meta to write.
        :param psz_value: the media's meta.
        """
        ...

    def set_user_data(self, p_new_user_data):  # -> Any:
        """Sets media descriptor's user_data. user_data is specialized data
        accessed by the host application, VLC.framework uses it as a pointer to
        an native object that references a :class:`Media` pointer

        :param p_new_user_data: pointer to user data.
        """
        ...

    def slaves_add(self, i_type, i_priority, psz_uri):  # -> Any:
        """Add a slave to the current media.

        A slave is an external input source that may contains an additional subtitle
        track (like a .srt) or an additional audio track (like a .ac3).

        .. note:: This function must be called before the media is parsed (via
            libvlc_media_parse_with_options) or before the media is played (via
            libvlc_media_player_play)

        :param i_type: subtitle or audio.
        :param i_priority: from 0 (low priority) to 4 (high priority).
        :param psz_uri: Uri of the slave (should contain a valid scheme).

        :return: 0 on success, -1 on error.
        :version: LibVLC 3.0.0 and later.
        """
        ...

    def slaves_clear(self):  # -> Any:
        """Clear all slaves previously added by :func:`slaves_add` or
        internally.

        :version: LibVLC 3.0.0 and later.
        """
        ...

    def slaves_get(self, ppp_slaves):  # -> Any:
        """Get a media descriptor's slave list

        The list will contain slaves parsed by VLC or previously added by
        :func:`slaves_add`. The typical use case of this function is to save
        a list of slave in a database for a later use.

        See :func:`slaves_add`

        :param ppp_slaves: address to store an allocated array of slaves (must be.
            freed with libvlc_media_slaves_release) [OUT].

        :return: the number of slaves (zero on error).
        :version: LibVLC 3.0.0 and later.
        """
        ...

    def subitems(self):  # -> Any:
        """Get subitems of media descriptor object. This will increment
        the reference count of supplied media descriptor object. Use
        :func:`list_release` to decrement the reference counting.

        :return: list of media descriptor subitems or None.
        """
        ...

class MediaDiscoverer(_Ctype):
    def __new__(cls, ptr=...):  # -> None:
        """(INTERNAL) ctypes wrapper constructor."""
        ...

    @memoize_parameterless
    def event_manager(self) -> EventManager:
        """Get event manager from media service discover object.


        .. warning:: **Deprecated!** Useless, media_discoverer events are only triggered when calling
            :func:`start` and :func:`stop`.

        :return: event manager object.
        """
        ...

    def is_running(self):  # -> Any:
        """Query if media service discover object is running.

        :return: true if running, false if not.
        """
        ...

    def localized_name(self):  # -> Any:
        """Get media service discover object its localized name.


        .. warning:: **Deprecated!** Useless, use :func:`list_get` to get the
            longname of the service discovery.

        :return: localized name or None if the media_discoverer is not started.
        """
        ...

    def media_list(self):  # -> Any:
        """Get media service discover media list.

        :return: list of media items.
        """
        ...

    def release(self):  # -> Any:
        """Release media discover object. If the reference count reaches 0, then
        the object will be released.
        """
        ...

    def start(self):  # -> Any:
        """Start media discovery.

        To stop it, call :func:`stop` or
        :func:`list_release` directly.

        See :func:`stop`

        :return: -1 in case of error, 0 otherwise.
        :version: LibVLC 3.0.0 or later.
        """
        ...

    def stop(self):  # -> Any:
        """Stop media discovery.

        See :func:`start`

        :version: LibVLC 3.0.0 or later.
        """
        ...

class MediaLibrary(_Ctype):
    def __new__(cls, ptr=...):  # -> None:
        """(INTERNAL) ctypes wrapper constructor."""
        ...

    def load(self):  # -> Any:
        """Load media library.

        :return: 0 on success, -1 on error.
        """
        ...

    def media_list(self):  # -> Any:
        """Get media library subitems.

        :return: media list subitems.
        """
        ...

    def release(self):  # -> Any:
        """Release media library object. This functions decrements the
        reference count of the media library object. If it reaches 0,
        then the object will be released.
        """
        ...

    def retain(self):  # -> Any:
        """Retain a reference to a media library object. This function will
        increment the reference counting for this object. Use
        :func:`release` to decrement the reference count.
        """
        ...

class MediaList(_Ctype):
    """Usage:

    .. code-block:: python

        MediaList(list_of_MRLs)

    See :meth:`Instance.media_list_new` documentation for details.

    """
    def __new__(cls, *args):  # -> Any | None:
        ...
    def get_instance(self):  # -> Any | None:
        ...
    def add_media(self, mrl: Media | MRL) -> Success:
        """Add :class:`Media` instance to media list.

        .. note::
            The lock should be held upon entering this function.

        :param mrl: A :class:`Media` instance or a MRL.

        :return: 0 on success, -1 if the media list is read-only.
        """
        ...

    def count(self) -> int:
        """Get count on media list items
        The :func:`lock` should be held upon entering this function.

        :return: number of items in media list.
        """
        ...

    def __len__(self):  # -> Any:
        ...
    @memoize_parameterless
    def event_manager(self) -> EventManager:
        """Get libvlc_event_manager from this media list instance.
        The p_event_manager is immutable, so you don't have to hold the lock

        :return: libvlc_event_manager.
        """
        ...

    def index_of_item(self, p_md) -> int:
        """Find index position of List media instance in media list.
        Warning: the function will return the first matched position.
        The :func:`lock` should be held upon entering this function.

        :param p_md: media instance.

        :return: position of media instance or -1 if media not found.
        """
        ...

    def insert_media(self, p_md, i_pos):  # -> Any:
        """Insert media instance in media list on a position
        The :func:`lock` should be held upon entering this function.

        :param p_md: a media instance.
        :param i_pos: position in array where to insert.

        :return: 0 on success, -1 if the media list is read-only.
        """
        ...

    def is_readonly(self):  # -> Any:
        """This indicates if this media list is read-only from a user point of view

        :return: 1 on readonly, 0 on readwrite.
        """
        ...

    def item_at_index(self, i_pos):  # -> Any:
        """List media instance in media list at a position
        The :func:`lock` should be held upon entering this function.

        :param i_pos: position in array where to insert.

        :return: media instance at position *i_pos*, or None if not found.
            In case of success, :func:`media_retain` is called to increase the refcount.
            on the media.
        """
        ...

    def __getitem__(self, i):  # -> Any:
        ...
    def __iter__(self) -> Iterator[Media]: ...
    def lock(self):  # -> Any:
        """Get lock on media list items"""
        ...

    def media(self):  # -> Any:
        """Get media instance from this media list instance. This action will increase
        the refcount on the media instance.
        The :func:`lock` should NOT be held upon entering this function.

        :return: media instance.
        """
        ...

    def release(self):  # -> Any:
        """Release media list created with :func:`new`."""
        ...

    def remove_index(self, i_pos):  # -> Any:
        """Remove media instance from media list on a position
        The :func:`lock` should be held upon entering this function.

        :param i_pos: position in array where to insert.

        :return: 0 on success, -1 if the list is read-only or the item was not found.
        """
        ...

    def retain(self):  # -> Any:
        """Retain reference to a media list"""
        ...

    def set_media(self, p_md):  # -> Any:
        """Associate media instance with this media list instance.
        If another media instance was present it will be released.
        The :func:`lock` should NOT be held upon entering this function.

        :param p_md: media instance to add.
        """
        ...

    def unlock(self):  # -> Any:
        """Release lock on media list items
        The :func:`lock` should be held upon entering this function.
        """
        ...

class MediaListPlayer(_Ctype):
    """It may take as parameter either:

    * an :class:`Instance`
    * nothing

    """
    def __new__(cls, arg=...):  # -> Any | None:
        ...
    def get_instance(self):
        """Return the associated :class:`Instance`."""
        ...

    @memoize_parameterless
    def event_manager(self) -> EventManager:
        """Return the event manager of this media_list_player.

        :return: the event manager.
        """
        ...

    def get_media_player(self) -> MediaPlayer:
        """Get media player of the media_list_player instance.


        .. note:: the caller is responsible for releasing the returned instance.

        :return: media player instance.
        """
        ...

    def get_state(self) -> State:
        """Get current libvlc_state of media list player

        :return: :class:`State` for media list player.
        """
        ...

    def is_playing(self) -> bool:
        """Is media list playing?

        :return: true for playing and false for not playing.
        """
        ...

    def next(self) -> Success:
        """Play next item from media list

        :return: 0 upon success -1 if there is no next item.
        """
        ...

    def pause(self) -> None:
        """Toggle pause (or resume) media list"""
        ...

    def play(self) -> None:
        """Play media list"""
        ...

    def play_item(self, p_md: Media) -> Success:
        """Play the given media item

        :param p_md: the media instance.

        :return: 0 upon success, -1 if the media is not part of the media list.
        """
        ...

    def play_item_at_index(self, i_index: int) -> Success:
        """Play media list item at position index

        :param i_index: index in media list to play.

        :return: 0 upon success -1 if the item wasn't found.
        """
        ...

    def __getitem__(self, i):  # -> Any:
        ...
    def __iter__(self):  # -> Generator[Any, Any, None]:
        ...
    def previous(self) -> Success:
        """Play previous item from media list

        :return: 0 upon success -1 if there is no previous item.
        """
        ...

    def release(self):  # -> Any:
        """Release a media_list_player after use
        Decrement the reference count of a media player object. If the
        reference count is 0, then :func:`release` will
        release the media player object. If the media player object
        has been released, then it should not be used again.
        """
        ...

    def retain(self):  # -> Any:
        """Retain a reference to a media player list object. Use
        :func:`release` to decrement reference count.
        """
        ...

    def set_media_list(self, p_mlist: MediaList) -> None:
        """Set the media list associated with the player

        :param p_mlist: list of media.
        """
        ...

    def set_media_player(self, p_mi):  # -> Any:
        """Replace media player in media_list_player with this instance.

        :param p_mi: media player instance.
        """
        ...

    def set_pause(self, do_pause):  # -> Any:
        """Pause or resume media list

        :param do_pause: play/resume if zero, pause if non-zero.

        :version: LibVLC 3.0.0 or later.
        """
        ...

    def set_playback_mode(self, e_mode: PlaybackMode) -> None:
        """Sets the playback mode for the playlist

        :param e_mode: playback mode specification.
        """
        ...

    def stop(self) -> None:
        """Stop playing media list"""
        ...

class MediaPlayer(_Ctype):
    """It may take as parameter either:

    * a string (media URI), options... In this case, an :class:`Instance` will be created.
    * an :class:`Instance`, a string (media URI), options...

    """
    def __new__(cls, *args):  # -> Any | None:
        ...
    def get_instance(self) -> Instance:
        """Return the associated :class:`Instance`."""
        ...

    def set_mrl(self, mrl, *options) -> Media:
        """Set the MRL to play.

        .. warning::
            Most audio and video options, such as text renderer,
            have no effects on an individual media. These options must be
            set at the :class:`Instance` or :class:`MediaPlayer` instanciation.

        :param mrl: The MRL
        :param options: optional media option=value strings

        :return: the Media object
        """
        ...

    def video_get_spu_description(self):  # -> list[Any]:
        """Get the description of available video subtitles."""
        ...

    def video_get_track_description(self):  # -> list[Any]:
        """Get the description of available video tracks."""
        ...

    def audio_get_track_description(self):  # -> list[Any]:
        """Get the description of available audio tracks."""
        ...

    def get_full_title_descriptions(self):  # -> Generator[Any, None, None] | None:
        """Get the full description of available titles.

        :return: The titles list.

        :version: LibVLC 3.0.0 and later.
        """
        ...

    def get_full_chapter_descriptions(self, i_chapters_of_title):  # -> Generator[Any, None, None] | None:
        """Get the full description of available chapters.

        :param i_chapters_of_title: index of the title to query for chapters (uses current title if set to -1).

        :return: the chapters list
        :version: LibVLC 3.0.0 and later.
        """
        ...

    def video_get_size(self, num=...):  # -> tuple[Any, Any]:
        """Get the video size in pixels as 2-tuple (width, height).

        :param num: video number (default 0).
        """
        ...

    def set_hwnd(self, drawable):  # -> None:
        """Set a Win32/Win64 API window handle (HWND).

        Specify where the media player should render its video
        output. If LibVLC was built without Win32/Win64 API output
        support, then this has no effects.

        :param drawable: windows handle of the drawable.
        """
        ...

    def video_get_width(self, num=...):
        """Get the width of a video in pixels.

        :param num: video number (default 0).
        """
        ...

    def video_get_height(self, num=...):
        """Get the height of a video in pixels.

        :param num: video number (default 0).
        """
        ...

    def video_get_cursor(self, num=...):  # -> tuple[Any, Any]:
        """Get the mouse pointer coordinates over a video as 2-tuple (x, y).

        Coordinates are expressed in terms of the decoded video resolution,
        **not** in terms of pixels on the screen/viewport. To get the
        latter, you must query your windowing system directly.

        Either coordinate may be negative or larger than the corresponding
        size of the video, if the cursor is outside the rendering area.

        .. warning::
            The coordinates may be out-of-date if the pointer is not
            located on the video rendering area. LibVLC does not track the
            mouse pointer if the latter is outside the video widget.

        .. note::
            LibVLC does not support multiple mouse pointers (but does
            support multiple input devices sharing the same pointer).

        :param num: video number (default 0).
        """
        ...

    def audio_get_channel(self):  # -> Any:
        """Get current audio channel.

        :return: the audio channel See :class:`AudioOutputChannel`.
        """
        ...

    def audio_get_delay(self):  # -> Any:
        """Get current audio delay.

        :return: the audio delay (microseconds).
        :version: LibVLC 1.1.1 or later.
        """
        ...

    def audio_get_mute(self):  # -> Any:
        """Get current mute status.

        :return: the mute status (boolean) if defined, -1 if undefined/unapplicable.
        """
        ...

    def audio_get_track(self):  # -> Any:
        """Get current audio track.

        :return: the audio track ID or -1 if no active input.
        """
        ...

    def audio_get_track_count(self):  # -> Any:
        """Get number of available audio tracks.

        :return: the number of available audio tracks (int), or -1 if unavailable.
        """
        ...

    def audio_get_volume(self) -> int:
        """Get current software audio volume.

        :return: the software volume in percents.
            (0 = mute, 100 = nominal / 0dB).
        """
        ...

    def audio_output_device_enum(self):  # -> Any:
        """Gets a list of potential audio output devices,
        See :func:`audio_output_device_set`.

        .. note:: Not all audio outputs support enumerating devices.
            The audio output may be functional even if the list is empty (None).

        .. note:: The list may not be exhaustive.

        .. warning:: Some audio output devices in the list might not actually work in
            some circumstances. By default, it is recommended to not specify any
            explicit audio device.

        :return: A None-terminated linked list of potential audio output devices.
            It must be freed with :func:`audio_output_device_list_release`.
        :version: LibVLC 2.2.0 or later.
        """
        ...

    def audio_output_device_get(self):  # -> Any:
        """Get the current audio output device identifier.

        This complements :func:`audio_output_device_set`.

        .. warning:: The initial value for the current audio output device identifier
            may not be set or may be some unknown value. A LibVLC application should
            compare this value against the known device identifiers (e.g. those that
            were previously retrieved by a call to :func:`audio_output_device_enum` or
            libvlc_audio_output_device_list_get) to find the current audio output device.

        It is possible that the selected audio output device changes (an external
        change) without a call to :func:`audio_output_device_set`. That may make this
        method unsuitable to use if a LibVLC application is attempting to track
        dynamic audio device changes as they happen.

        :return: the current audio output device identifier.
            None if no device is selected or in case of error.
            (the result must be released with free() or libvlc_free).
        :version: LibVLC 3.0.0 or later.
        """
        ...

    def audio_output_device_set(self, module, device_id):  # -> Any:
        """Configures an explicit audio output device.

        If the *module* paramater is None, audio output will be moved to the device
        specified by the device identifier string immediately. This is the
        recommended usage.

        A list of adequate potential device strings can be obtained with
        :func:`audio_output_device_enum`.

        However passing None is supported in LibVLC version 2.2.0 and later only;
        in earlier versions, this function would have no effects when the module
        parameter was None.

        If the *module* parameter is not None, the device parameter of the
        corresponding audio output, if it exists, will be set to the specified
        string. Note that some audio output modules do not have such a parameter
        (notably MMDevice and PulseAudio).

        A list of adequate potential device strings can be obtained with
        :func:`audio_output_device_list_get`.

        .. note:: This function does not select the specified audio output plugin.
            :func:`audio_output_set` is used for that purpose.

        .. warning:: The syntax for the device parameter depends on the audio output.

        Some audio output modules require further parameters (e.g. a channels map
        in the case of ALSA).

        :param module: If None, current audio output module.
            if non-None, name of audio output module.
            (See libvlc_audio_output_t).
        :param device_id: device identifier string.

        :return: Nothing. Errors are ignored (this is a design bug).
        """
        ...

    def audio_output_get_device_type(self):  # -> Any:
        """Stub for backward compatibility.

        :return: always -1.
        """
        ...

    def audio_output_set(self, psz_name):  # -> Any:
        """Selects an audio output module.

        .. note:: Any change will take be effect only after playback is stopped and
            restarted. Audio output cannot be changed while playing.

        :param psz_name: name of audio output,
            use psz_name of See :class:`AudioOutput`.

        :return: 0 if function succeeded, -1 on error.
        """
        ...

    def audio_output_set_device_type(self, device_type):  # -> Any:
        """Stub for backward compatibility."""
        ...

    def audio_set_callbacks(self, play, pause, resume, flush, drain, opaque):  # -> Any:
        """Sets callbacks and private data for decoded audio.

        Use :func:`audio_set_format` or :func:`audio_set_format_callbacks`
        to configure the decoded audio format.

        .. note:: The audio callbacks override any other audio output mechanism.
            If the callbacks are set, LibVLC will **not** output audio in any way.

        :param play: callback to play audio samples (must not be None).
        :param pause: callback to pause playback (or None to ignore).
        :param resume: callback to resume playback (or None to ignore).
        :param flush: callback to flush audio buffers (or None to ignore).
        :param drain: callback to drain audio buffers (or None to ignore).
        :param opaque: private pointer for the audio callbacks (as first parameter).

        :version: LibVLC 2.0.0 or later.
        """
        ...

    def audio_set_channel(self, channel):  # -> Any:
        """Set current audio *channel*.

        :param channel: the audio channel, See :class:`AudioOutputChannel`.

        :return: 0 on success, -1 on error.
        """
        ...

    def audio_set_delay(self, i_delay):  # -> Any:
        """Set current audio delay. The audio delay will be reset to zero each time the media changes.

        :param i_delay: the audio delay (microseconds).

        :return: 0 on success, -1 on error.
        :version: LibVLC 1.1.1 or later.
        """
        ...

    def audio_set_format(self, format, rate, channels):  # -> Any:
        """Sets a fixed decoded audio *format*.

        This only works in combination with :func:`audio_set_callbacks`,
        and is mutually exclusive with :func:`audio_set_format_callbacks`.

        :param format: a four-characters string identifying the sample format.
            (e.g. "S16N" or "f32l").
        :param rate: sample rate (expressed in Hz).
        :param channels: channels count.

        :version: LibVLC 2.0.0 or later.
        """
        ...

    def audio_set_format_callbacks(self, setup, cleanup):  # -> Any:
        """Sets decoded audio format via callbacks.

        This only works in combination with :func:`audio_set_callbacks`.

        :param setup: callback to select the audio format (cannot be None).
        :param cleanup: callback to release any allocated resources (or None).

        :version: LibVLC 2.0.0 or later.
        """
        ...

    def audio_set_mute(self, status):  # -> Any:
        """Set mute *status*.

        .. warning:: This function does not always work. If there are no active audio
            playback stream, the mute *status* might not be available. If digital
            pass-through (S/PDIF, HDMI...) is in use, muting may be unapplicable. Also
            some audio output plugins do not support muting at all.

        .. note:: To force silent playback, disable all audio tracks. This is more
            efficient and reliable than mute.

        :param status: If status is true then mute, otherwise unmute.
        """
        ...

    def audio_set_track(self, i_track):  # -> Any:
        """Set current audio track.

        :param i_track: the track ID (i_id field from track description).

        :return: 0 on success, -1 on error.
        """
        ...

    def audio_set_volume(self, i_volume: int) -> Success:
        """Set current software audio volume.

        :param i_volume: the volume in percents (0 = mute, 100 = 0dB).

        :return: 0 if the volume was set, -1 if it was out of range.
        """
        ...

    def audio_set_volume_callback(self, set_volume):  # -> Any:
        """Set callbacks and private data for decoded audio. This only works in
        combination with :func:`audio_set_callbacks`.
        Use :func:`audio_set_format` or :func:`audio_set_format_callbacks`
        to configure the decoded audio format.

        :param set_volume: callback to apply audio volume,
            or None to apply volume in software.

        :version: LibVLC 2.0.0 or later.
        """
        ...

    def audio_toggle_mute(self):  # -> Any:
        """Toggle mute status.

        .. warning:: Toggling mute atomically is not always possible: On some platforms,
            other processes can mute the VLC audio playback stream asynchronously. Thus,
            there is a small race condition where toggling will not work.
            See also the limitations of :func:`audio_set_mute`.
        """
        ...

    def get_fullscreen(self):  # -> Any:
        """Get current fullscreen status.

        :return: the fullscreen status (boolean).
        """
        ...

    def add_slave(self, i_type, psz_uri, b_select):  # -> Any:
        """Add a slave to the current media player.

        .. note:: If the player is playing, the slave will be added directly. This call
            will also update the slave list of the attached :class:`Media`.

        See :func:`media_slaves_add`

        :param i_type: subtitle or audio.
        :param psz_uri: Uri of the slave (should contain a valid scheme).
        :param b_select: True if this slave should be selected when it's loaded.

        :return: 0 on success, -1 on error.
        :version: LibVLC 3.0.0 and later.
        """
        ...

    def can_pause(self):  # -> Any:
        """Can this media player be paused?

        :return: true if the media player can pause.
        """
        ...

    @memoize_parameterless
    def event_manager(self) -> EventManager:
        """Get the Event Manager from which the media player send event.

        :return: the event manager associated with p_mi.
        """
        ...

    def get_agl(self):  # -> Any:
        """.. warning:: **Deprecated!** Use :func:`get_nsobject` instead."""
        ...

    def get_chapter(self):  # -> Any:
        """Get movie chapter.

        :return: chapter number currently playing, or -1 if there is no media.
        """
        ...

    def get_chapter_count(self):  # -> Any:
        """Get movie chapter count

        :return: number of chapters in movie, or -1.
        """
        ...

    def get_chapter_count_for_title(self, i_title):  # -> Any:
        """Get title chapter count

        :param i_title: title.

        :return: number of chapters in title, or -1.
        """
        ...

    def get_fps(self):  # -> Any:
        """Get movie fps rate

        This function is provided for backward compatibility. It cannot deal with
        multiple video tracks. In LibVLC versions prior to 3.0, it would also fail
        if the file format did not convey the frame rate explicitly.


        .. warning:: **Deprecated!** Consider using :func:`media_tracks_get` instead.

        :return: frames per second (fps) for this playing movie, or 0 if unspecified.
        """
        ...

    def get_hwnd(self):  # -> Any:
        """Get the Windows API window handle (HWND) previously set with
        :func:`set_hwnd`. The handle will be returned even if LibVLC
        is not currently outputting any video to it.

        :return: a window handle or None if there are none.
        """
        ...

    def get_length(self) -> int:
        """Get the current movie length (in ms).

        :return: the movie length (in ms), or -1 if there is no media.
        """
        ...

    def get_media(self) -> Media | None:
        """Get the media used by the media_player.

        :return: the media associated with *p_mi*, or None if no.
            media is associated.
        """
        ...

    def get_nsobject(self):  # -> Any:
        """Get the NSView handler previously set with :func:`set_nsobject`.

        :return: the NSView handler or 0 if none where set.
        """
        ...

    def get_position(self):  # -> Any:
        """Get movie position as percentage between 0.0 and 1.0.

        :return: movie position, or -1. in case of error.
        """
        ...

    def get_rate(self):  # -> Any:
        """Get the requested movie play rate.
        .. warning:: Depending on the underlying media, the requested rate may be
            different from the real playback rate.

        :return: movie play rate.
        """
        ...

    def get_role(self):  # -> Any:
        """Gets the media role.

        :return: the media player role (libvlc_media_player_role_t).
        :version: LibVLC 3.0.0 and later.
        """
        ...

    def get_state(self):  # -> Any:
        """Get current movie state

        :return: the current state of the media player (playing, paused, ...) See :class:`State`.
        """
        ...

    def get_time(self) -> int:
        """Get the current movie time (in ms).

        :return: the movie time (in ms), or -1 if there is no media.
        """
        ...

    def get_title(self):  # -> Any:
        """Get movie title

        :return: title number currently playing, or -1.
        """
        ...

    def get_title_count(self):  # -> Any:
        """Get movie title count

        :return: title number count, or -1.
        """
        ...

    def get_xwindow(self):  # -> Any:
        """Get the X Window System window identifier previously set with
        :func:`set_xwindow`. Note that this will return the identifier
        even if VLC is not currently using it (for instance if it is playing an
        audio-only input).

        :return: an X window ID, or 0 if none where set.
        """
        ...

    def has_vout(self):  # -> Any:
        """How many video outputs does this media player have?

        :return: the number of video outputs.
        """
        ...

    def is_playing(self) -> int:
        """is_playing

        :return: 1 if the media player is playing, 0 otherwise.
        """
        ...

    def is_seekable(self):  # -> Any:
        """Is this media player seekable?

        :return: true if the media player can seek.
        """
        ...

    def navigate(self, navigate):  # -> Any:
        """Navigate through DVD Menu

        :param navigate: the Navigation mode.

        :version: libVLC 2.0.0 or later.
        """
        ...

    def next_chapter(self):  # -> Any:
        """Set next chapter (if applicable)"""
        ...

    def next_frame(self):  # -> Any:
        """Display the next frame (if supported)"""
        ...

    def pause(self) -> None:
        """Toggle pause (no effect if there is no media)"""
        ...

    def play(self) -> Success:
        """Play

        :return: 0 if playback started (and was already started), or -1 on error.
        """
        ...

    def previous_chapter(self):  # -> Any:
        """Set previous chapter (if applicable)"""
        ...

    def program_scrambled(self):  # -> Any:
        """Check if the current program is scrambled

        :return: true if the current program is scrambled.

        :version: LibVLC 2.2.0 or later.
        """
        ...

    def release(self):  # -> Any:
        """Release a media_player after use
        Decrement the reference count of a media player object. If the
        reference count is 0, then :func:`release` will
        release the media player object. If the media player object
        has been released, then it should not be used again.
        """
        ...

    def retain(self):  # -> Any:
        """Retain a reference to a media player object. Use
        :func:`release` to decrement reference count.
        """
        ...

    def set_agl(self, drawable):  # -> Any:
        """.. warning:: **Deprecated!** Use :func:`set_nsobject` instead."""
        ...

    def set_android_context(self, p_awindow_handler):  # -> Any:
        """Set the android context.

        :param p_awindow_handler: org.videolan.libvlc.AWindow jobject owned by the.
            org.videolan.libvlc.MediaPlayer class from the libvlc-android project.

        :version: LibVLC 3.0.0 and later.
        """
        ...

    def set_chapter(self, i_chapter):  # -> Any:
        """Set movie chapter (if applicable).

        :param i_chapter: chapter number to play.
        """
        ...

    def set_equalizer(self, p_equalizer):  # -> Any:
        """Apply new equalizer settings to a media player.

        The equalizer is first created by invoking :func:`audio_equalizer_new` or
        :func:`audio_equalizer_new_from_preset`.

        It is possible to apply new equalizer settings to a media player whether the media
        player is currently playing media or not.

        Invoking this method will immediately apply the new equalizer settings to the audio
        output of the currently playing media if there is any.

        If there is no currently playing media, the new equalizer settings will be applied
        later if and when new media is played.

        Equalizer settings will automatically be applied to subsequently played media.

        To disable the equalizer for a media player invoke this method passing None for the
        p_equalizer parameter.

        The media player does not keep a reference to the supplied equalizer so it is safe
        for an application to release the equalizer reference any time after this method
        returns.

        :param p_equalizer: opaque equalizer handle, or None to disable the equalizer for this media player.

        :return: zero on success, -1 on error.
        :version: LibVLC 2.2.0 or later.
        """
        ...

    def set_evas_object(self, p_evas_object):  # -> Any:
        """Set the EFL Evas Object.

        :param p_evas_object: a valid EFL Evas Object (Evas_Object).

        :return: -1 if an error was detected, 0 otherwise.
        :version: LibVLC 3.0.0 and later.
        """
        ...

    def set_media(self, p_md):  # -> Any:
        """Set the media that will be used by the media_player. If any,
        previous md will be released.

        :param p_md: the Media. Afterwards the p_md can be safely.
            destroyed.
        """
        ...

    def set_nsobject(self, drawable):  # -> Any:
        """Set the NSView handler where the media player should render its video output.

        Use the vout called "macosx".

        The *drawable* is an NSObject that follow the VLCOpenGLVideoViewEmbedding
        protocol:

        .. code-block:: objectivec++

            @protocol VLCOpenGLVideoViewEmbedding <NSObject>
            - (void)addVoutSubview:(NSView *)view;
            - (void)removeVoutSubview:(NSView *)view;
            @end

        Or it can be an NSView object.

        If you want to use it along with Qt see the QMacCocoaViewContainer. Then
        the following code should work:

        .. code-block:: objectivec++

            NSView *video = [[NSView alloc] init];
            QMacCocoaViewContainer *container = new QMacCocoaViewContainer(video, parent);
            libvlc_media_player_set_nsobject(mp, video);
            [video release];


        You can find a live example in VLCVideoView in VLCKit.framework.

        :param drawable: the drawable that is either an NSView or an object following.
            the VLCOpenGLVideoViewEmbedding protocol.
        """
        ...

    def set_pause(self, do_pause):  # -> Any:
        """Pause or resume (no effect if there is no media)

        :param do_pause: play/resume if zero, pause if non-zero.

        :version: LibVLC 1.1.1 or later.
        """
        ...

    def set_position(self, f_pos: float) -> None:
        """Set movie position as percentage between 0.0 and 1.0.
        This has no effect if playback is not enabled.
        This might not work depending on the underlying input format and protocol.

        :param f_pos: the position.
        """
        ...

    def set_rate(self, rate):  # -> Any:
        """Set movie play rate

        :param rate: movie play rate to set.

        :return: -1 if an error was detected, 0 otherwise (but even then, it might.
            not actually work depending on the underlying media protocol).
        """
        ...

    def set_renderer(self, p_item):  # -> Any:
        """Set a renderer to the media player

        .. note:: must be called before the first call of :func:`play` to
            take effect.

        See :func:`renderer_discoverer_new`

        :param p_item: an item discovered by :func:`renderer_discoverer_start`.

        :return: 0 on success, -1 on error.
        :version: LibVLC 3.0.0 or later.
        """
        ...

    def set_role(self, role):  # -> Any:
        """Sets the media *role*.

        :param role: the media player role (libvlc_media_player_role_t).

        :return: 0 on success, -1 on error.
        """
        ...

    def set_time(self, i_time):  # -> Any:
        """Set the movie time (in ms). This has no effect if no media is being played.
        Not all formats and protocols support this.

        :param i_time: the movie time (in ms).
        """
        ...

    def set_title(self, i_title):  # -> Any:
        """Set movie title

        :param i_title: title number to play.
        """
        ...

    def set_video_title_display(self, position, timeout):  # -> Any:
        """Set if, and how, the video title will be shown when media is played.

        :param position: position at which to display the title, or libvlc_position_disable to prevent the title from being displayed.
        :param timeout: title display timeout in milliseconds (ignored if libvlc_position_disable).

        :version: libVLC 2.1.0 or later.
        """
        ...

    def set_xwindow(self, drawable):  # -> Any:
        """Set an X Window System *drawable* where the media player should render its
        video output. The call takes effect when the playback starts. If it is
        already started, it might need to be stopped before changes apply.
        If LibVLC was built without X11 output support, then this function has no
        effects.

        By default, LibVLC will capture input events on the video rendering area.
        Use :func:`video_set_mouse_input` and :func:`video_set_key_input` to
        disable that and deliver events to the parent window / to the application
        instead. By design, the X11 protocol delivers input events to only one
        recipient.

        .. warning::
            The application must call the XInitThreads() function from Xlib before
            :func:`new`, and before any call to XOpenDisplay() directly or via any
            other library. Failure to call XInitThreads() will seriously impede LibVLC
            performance. Calling XOpenDisplay() before XInitThreads() will eventually
            crash the process. That is a limitation of Xlib.

        .. note::
            The specified identifier must correspond to an existing Input/Output class
            X11 window. Pixmaps are **not** currently supported. The default X11
            server is assumed, i.e. that specified in the DISPLAY environment variable.

        .. warning::
            LibVLC can deal with invalid X11 handle errors, however some display drivers
            (EGL, GLX, VA and/or VDPAU) can unfortunately not. Thus the window handle
            must remain valid until playback is stopped, otherwise the process may
            abort or crash.

        :param drawable: X11 window ID.

        :bug:
            No more than one window handle per media player instance can be specified.
            If the media has multiple simultaneously active video tracks, extra tracks.
            will be rendered into external windows beyond the control of the.
            application.
        """
        ...

    def stop(self):  # -> Any:
        """Stop (no effect if there is no media)"""
        ...

    def will_play(self):  # -> Any:
        """Is the player able to play

        :return: boolean.
        """
        ...

    def set_fullscreen(self, b_fullscreen):  # -> Any:
        """Enable or disable fullscreen.

        .. warning:: With most window managers, only a top-level windows can be in
            full-screen mode. Hence, this function will not operate properly if
            :func:`set_xwindow` was used to embed the video in a
            non-top-level window. In that case, the embedding window must be reparented
            to the root window **before** fullscreen mode is enabled. You will want
            to reparent it back to its normal parent when disabling fullscreen.

        :param b_fullscreen: boolean for fullscreen status.
        """
        ...

    def toggle_fullscreen(self):  # -> Any:
        """Toggle fullscreen status on non-embedded video outputs.

        .. warning:: The same limitations applies to this function
            as to :func:`set_fullscreen`.
        """
        ...

    def toggle_teletext(self):  # -> Any:
        """Toggle teletext transparent status on video output.

        .. warning:: **Deprecated!** use :func:`video_set_teletext` instead.
        """
        ...

    def video_get_adjust_float(self, option):  # -> Any:
        """Get float adjust *option*.

        :param option: adjust option to get, values of :class:`VideoAdjustOption`.

        :version: LibVLC 1.1.1 and later.
        """
        ...

    def video_get_adjust_int(self, option):  # -> Any:
        """Get integer adjust *option*.

        :param option: adjust option to get, values of :class:`VideoAdjustOption`.

        :version: LibVLC 1.1.1 and later.
        """
        ...

    def video_get_aspect_ratio(self):  # -> Any:
        """Get current video aspect ratio.

        :return: the video aspect ratio or None if unspecified.
            (the result must be released with free() or libvlc_free).
        """
        ...

    def video_get_chapter_description(self, i_title):  # -> Any:
        """Get the description of available chapters for specific title.

        :param i_title: selected title.

        :return: list containing description of available chapter for title *i_title*.
            It must be freed with :func:`track_description_list_release`.
        """
        ...

    def video_get_crop_geometry(self):  # -> Any:
        """Get current crop filter geometry.

        :return: the crop filter geometry or None if unset.
        """
        ...

    def video_get_logo_int(self, option):  # -> Any:
        """Get integer logo *option*.

        :param option: logo option to get, values of :class:`VideoLogoOption`.
        """
        ...

    def video_get_marquee_int(self, option):  # -> Any:
        """Get an integer marquee *option* value

        :param option: marq option to get See libvlc_video_marquee_int_option_t.
        """
        ...

    def video_get_marquee_string(self, option):  # -> Any:
        """Get a string marquee *option* value

        :param option: marq option to get See libvlc_video_marquee_string_option_t.
        """
        ...

    def video_get_scale(self):  # -> Any:
        """Get the current video scaling factor.
        See also :func:`video_set_scale`.

        :return: the currently configured zoom factor, or 0. if the video is set.
            to fit to the output window/drawable automatically.
        """
        ...

    def video_get_spu(self):  # -> Any:
        """Get current video subtitle.

        :return: the video subtitle selected, or -1 if none.
        """
        ...

    def video_get_spu_count(self):  # -> Any:
        """Get the number of available video subtitles.

        :return: the number of available video subtitles.
        """
        ...

    def video_get_spu_delay(self):  # -> Any:
        """Get the current subtitle delay. Positive values means subtitles are being
        displayed later, negative values earlier.

        :return: time (in microseconds) the display of subtitles is being delayed.
        :version: LibVLC 2.0.0 or later.
        """
        ...

    def video_get_teletext(self):  # -> Any:
        """Get current teletext page requested or 0 if it's disabled.

        Teletext is disabled by default, call :func:`video_set_teletext` to enable
        it.

        :return: the current teletext page requested.
        """
        ...

    def video_get_title_description(self):  # -> Any:
        """Get the description of available titles.

        :return: list containing description of available titles.
            It must be freed with :func:`track_description_list_release`.
        """
        ...

    def video_get_track(self):  # -> Any:
        """Get current video track.

        :return: the video track ID (int) or -1 if no active input.
        """
        ...

    def video_get_track_count(self):  # -> Any:
        """Get number of available video tracks.

        :return: the number of available video tracks (int).
        """
        ...

    def video_set_adjust_float(self, option, value):  # -> Any:
        """Set adjust *option* as float. Options that take a different type value
        are ignored.

        :param option: adust option to set, values of :class:`VideoAdjustOption`.
        :param value: adjust option value.

        :version: LibVLC 1.1.1 and later.
        """
        ...

    def video_set_adjust_int(self, option, value):  # -> Any:
        """Set adjust *option* as integer. Options that take a different type value
        are ignored.
        Passing libvlc_adjust_enable as *option* *value* has the side effect of
        starting (arg !0) or stopping (arg 0) the adjust filter.

        :param option: adust option to set, values of :class:`VideoAdjustOption`.
        :param value: adjust option value.

        :version: LibVLC 1.1.1 and later.
        """
        ...

    def video_set_aspect_ratio(self, psz_aspect):  # -> Any:
        """Set new video aspect ratio.


        .. note:: Invalid aspect ratios are ignored.

        :param psz_aspect: new video aspect-ratio or None to reset to default.
        """
        ...

    def video_set_callbacks(self, lock, unlock, display, opaque):  # -> Any:
        """Set callbacks and private data to render decoded video to a custom area
        in memory.
        Use :func:`video_set_format` or :func:`video_set_format_callbacks`
        to configure the decoded format.

        .. warning:: Rendering video into custom memory buffers is considerably less
            efficient than rendering in a custom window as normal.

        For optimal perfomances, VLC media player renders into a custom window, and
        does not use this function and associated callbacks. It is **highly
        recommended** that other LibVLC-based application do likewise.
        To embed video in a window, use libvlc_media_player_set_xid or equivalent
        depending on the operating system.

        If window embedding does not fit the application use case, then a custom
        LibVLC video output *display* plugin is required to maintain optimal video
        rendering performances.

        The following limitations affect performance:

        * Hardware video decoding acceleration will either be disabled completely,
            or require (relatively slow) copy from video/DSP memory to main memory.
        * Sub-pictures (subtitles, on-screen *display*, etc.) must be blent into the
            main picture by the CPU instead of the GPU.
        * Depending on the video format, pixel format conversion, picture scaling,
            cropping and/or picture re-orientation, must be performed by the CPU
            instead of the GPU.
        * Memory copying is required between LibVLC reference picture buffers and
            application buffers (between *lock* and *unlock* callbacks).

        :param lock: callback to lock video memory (must not be None).
        :param unlock: callback to unlock video memory (or None if not needed).
        :param display: callback to display video (or None if not needed).
        :param opaque: private pointer for the three callbacks (as first parameter).

        :version: LibVLC 1.1.1 or later.
        """
        ...

    def video_set_crop_geometry(self, psz_geometry):  # -> Any:
        """Set new crop filter geometry.

        :param psz_geometry: new crop filter geometry (None to unset).
        """
        ...

    def video_set_deinterlace(self, psz_mode):  # -> Any:
        """Enable or disable deinterlace filter

        :param psz_mode: type of deinterlace filter, None to disable.
        """
        ...

    def video_set_format(self, chroma, width, height, pitch):  # -> Any:
        """Set decoded video *chroma* and dimensions.
        This only works in combination with :func:`video_set_callbacks`,
        and is mutually exclusive with :func:`video_set_format_callbacks`.

        :param chroma: a four-characters string identifying the chroma.
            (e.g. "RV32" or "YUYV").
        :param width: pixel width.
        :param height: pixel height.
        :param pitch: line pitch (in bytes).

        :version: LibVLC 1.1.1 or later.
        :bug: All pixel planes are expected to have the same *pitch*.
            To use the YCbCr color space with chrominance subsampling,
            consider using :func:`video_set_format_callbacks` instead.
        """
        ...

    def video_set_format_callbacks(self, setup, cleanup):  # -> Any:
        """Set decoded video chroma and dimensions. This only works in combination with
        :func:`video_set_callbacks`.

        :param setup: callback to select the video format (cannot be None).
        :param cleanup: callback to release any allocated resources (or None).

        :version: LibVLC 2.0.0 or later.
        """
        ...

    def video_set_key_input(self, on):  # -> Any:
        """Enable or disable key press events handling, according to the LibVLC hotkeys
        configuration. By default and for historical reasons, keyboard events are
        handled by the LibVLC video widget.

        .. note:: On X11, there can be only one subscriber for key press and mouse
            click events per window. If your application has subscribed to those events
            for the X window ID of the video widget, then LibVLC will not be able to
            handle key presses and mouse clicks in any case.

        .. warning:: This function is only implemented for X11 and Win32 at the moment.

        :param on: true to handle key press events, false to ignore them.
        """
        ...

    def video_set_logo_int(self, option, value):  # -> Any:
        """Set logo *option* as integer. Options that take a different type value
        are ignored.
        Passing libvlc_logo_enable as *option* *value* has the side effect of
        starting (arg !0) or stopping (arg 0) the logo filter.

        :param option: logo option to set, values of :class:`VideoLogoOption`.
        :param value: logo option value.
        """
        ...

    def video_set_logo_string(self, option, psz_value):  # -> Any:
        """Set logo *option* as string. Options that take a different type value
        are ignored.

        :param option: logo option to set, values of :class:`VideoLogoOption`.
        :param psz_value: logo option value.
        """
        ...

    def video_set_marquee_int(self, option, i_val):  # -> Any:
        """Enable, disable or set an integer marquee option

        Setting libvlc_marquee_Enable has the side effect of enabling (arg !0)
        or disabling (arg 0) the marq filter.

        :param option: marq option to set See libvlc_video_marquee_int_option_t.
        :param i_val: marq option value.
        """
        ...

    def video_set_marquee_string(self, option, psz_text):  # -> Any:
        """Set a marquee string option

        :param option: marq option to set See libvlc_video_marquee_string_option_t.
        :param psz_text: marq option value.
        """
        ...

    def video_set_mouse_input(self, on):  # -> Any:
        """Enable or disable mouse click events handling. By default, those events are
        handled. This is needed for DVD menus to work, as well as a few video
        filters such as "puzzle".

        See :func:`video_set_key_input`.

        .. warning:: This function is only implemented for X11 and Win32 at the moment.

        :param on: true to handle mouse click events, false to ignore them.
        """
        ...

    def video_set_scale(self, f_factor):  # -> Any:
        """Set the video scaling factor. That is the ratio of the number of pixels on
        screen to the number of pixels in the original decoded video in each
        dimension. Zero is a special value; it will adjust the video to the output
        window/drawable (in windowed mode) or the entire screen.

        Note that not all video outputs support scaling.

        :param f_factor: the scaling factor, or zero.
        """
        ...

    def video_set_spu(self, i_spu):  # -> Any:
        """Set new video subtitle.

        :param i_spu: video subtitle track to select (i_id from track description).

        :return: 0 on success, -1 if out of range.
        """
        ...

    def video_set_spu_delay(self, i_delay):  # -> Any:
        """Set the subtitle delay. This affects the timing of when the subtitle will
        be displayed. Positive values result in subtitles being displayed later,
        while negative values will result in subtitles being displayed earlier.

        The subtitle delay will be reset to zero each time the media changes.

        :param i_delay: time (in microseconds) the display of subtitles should be delayed.

        :return: 0 on success, -1 on error.
        :version: LibVLC 2.0.0 or later.
        """
        ...

    def video_set_subtitle_file(self, psz_subtitle):  # -> Any:
        """Set new video subtitle file.

        .. warning:: **Deprecated!** Use :func:`add_slave` instead.

        :param psz_subtitle: new video subtitle file.

        :return: the success status (boolean).
        """
        ...

    def video_set_teletext(self, i_page):  # -> Any:
        """Set new teletext page to retrieve.

        This function can also be used to send a teletext key.

        :param i_page: teletex page number requested. This value can be 0 to disable.
            teletext, a number in the range ]0;1000[ to show the requested page, or a.
            :class:`TeletextKey`. 100 is the default teletext page.
        """
        ...

    def video_set_track(self, i_track):  # -> Any:
        """Set video track.

        :param i_track: the track ID (i_id field from track description).

        :return: 0 on success, -1 if out of range.
        """
        ...

    def video_take_snapshot(self, num, psz_filepath, i_width, i_height):  # -> Any:
        """Take a snapshot of the current video window.

        If *i_width* AND *i_height* is 0, original size is used.
        If *i_width* XOR *i_height* is 0, original aspect-ratio is preserved.

        :param num: number of video output (typically 0 for the first/only one).
        :param psz_filepath: the path of a file or a folder to save the screenshot into.
        :param i_width: the snapshot's width.
        :param i_height: the snapshot's height.

        :return: 0 on success, -1 if the video was not found.
        """
        ...

    def video_update_viewpoint(self, p_viewpoint, b_absolute):  # -> Any:
        """Update the video viewpoint information.

        .. note:: It is safe to call this function before the media player is started.

        .. note:: the values are set asynchronously, it will be used by the next frame displayed.

        :param p_viewpoint: video viewpoint allocated via :func:`video_new_viewpoint`.
        :param b_absolute: if true replace the old viewpoint with the new one. If.
            false, increase/decrease it.

        :return: -1 in case of error, 0 otherwise.

        :version: LibVLC 3.0.0 and later.
        """
        ...

class Renderer(_Ctype):
    def __new__(cls, ptr=...):  # -> None:
        """(INTERNAL) ctypes wrapper constructor."""
        ...

    def flags(self):  # -> Any:
        """Get the flags of a renderer item

        See LIBVLC_RENDERER_CAN_AUDIO
        See LIBVLC_RENDERER_CAN_VIDEO

        :return: bitwise flag: capabilities of the renderer, see.
        :version: LibVLC 3.0.0 or later.
        """
        ...

    def hold(self):  # -> Any:
        """Hold a renderer item, i.e. creates a new reference

        This functions need to called from the libvlc_RendererDiscovererItemAdded
        callback if the libvlc user wants to use this item after. (for display or
        for passing it to the mediaplayer for example).

        :return: the current item.
        :version: LibVLC 3.0.0 or later.
        """
        ...

    def icon_uri(self):  # -> Any:
        """Get the icon uri of a renderer item

        :return: the uri of the item's icon (can be None, must *not* be freed).
        :version: LibVLC 3.0.0 or later.
        """
        ...

    def name(self):  # -> Any:
        """Get the human readable name of a renderer item

        :return: the name of the item (can't be None, must *not* be freed).
        :version: LibVLC 3.0.0 or later.
        """
        ...

    def release(self):  # -> Any:
        """Releases a renderer item, i.e. decrements its reference counter

        :version: LibVLC 3.0.0 or later.
        """
        ...

    def type(self):  # -> Any:
        """Get the type (not translated) of a renderer item. For now, the type can only
        be "chromecast" ("upnp", "airplay" may come later).

        :return: the type of the item (can't be None, must *not* be freed).
        :version: LibVLC 3.0.0 or later.
        """
        ...

class RendererDiscoverer(_Ctype):
    def __new__(cls, ptr=...):  # -> None:
        """(INTERNAL) ctypes wrapper constructor."""
        ...

    @memoize_parameterless
    def event_manager(self) -> EventManager:
        """Get the event manager of the renderer discoverer

        The possible events to attach are libvlc_RendererDiscovererItemAdded
        and libvlc_RendererDiscovererItemDeleted.

        The :class:`Renderer` struct passed to event callbacks is owned by
        VLC, users should take care of holding/releasing this struct for their
        internal usage.

        See :class:`Event`.u.renderer_discoverer_item_added.item
        See :class:`Event`.u.renderer_discoverer_item_removed.item

        :return: a valid event manager (can't fail).
        :version: LibVLC 3.0.0 or later.
        """
        ...

    def release(self):  # -> Any:
        """Release a renderer discoverer object

        :version: LibVLC 3.0.0 or later.
        """
        ...

    def start(self):  # -> Any:
        """Start renderer discovery

        To stop it, call :func:`stop` or
        :func:`release` directly.

        See :func:`stop`

        :return: -1 in case of error, 0 otherwise.
        :version: LibVLC 3.0.0 or later.
        """
        ...

    def stop(self):  # -> Any:
        """Stop renderer discovery.

        See :func:`start`

        :version: LibVLC 3.0.0 or later.
        """
        ...

class AudioOutputChannel(_Enum):
    """Audio channels.

    Defined symbols:
      * ``vlc.AudioOutputChannel.Error``
      * ``vlc.AudioOutputChannel.Stereo``
      * ``vlc.AudioOutputChannel.RStereo``
      * ``vlc.AudioOutputChannel.Left``
      * ``vlc.AudioOutputChannel.Right``
      * ``vlc.AudioOutputChannel.Dolbys``
    """

    _enum_names_ = ...

class AudioOutputDeviceTypes(_Enum):
    """Audio device types.

    Defined symbols:
      * ``vlc.AudioOutputDeviceTypes.Error``
      * ``vlc.AudioOutputDeviceTypes.Mono``
      * ``vlc.AudioOutputDeviceTypes.Stereo``
      * ``vlc.AudioOutputDeviceTypes._2F2R``
      * ``vlc.AudioOutputDeviceTypes._3F2R``
      * ``vlc.AudioOutputDeviceTypes._5_1``
      * ``vlc.AudioOutputDeviceTypes._6_1``
      * ``vlc.AudioOutputDeviceTypes._7_1``
      * ``vlc.AudioOutputDeviceTypes.SPDIF``
    """

    _enum_names_ = ...

class DialogQuestionType(_Enum):
    """

    Defined symbols:
      * ``vlc.DialogQuestionType.DIALOG_QUESTION_NORMAL``
      * ``vlc.DialogQuestionType.DIALOG_QUESTION_WARNING``
      * ``vlc.DialogQuestionType.DIALOG_QUESTION_CRITICAL``
    """

    _enum_names_ = ...

class EventType(_Enum):
    """Event types.

    Defined symbols:
      * ``vlc.EventType.MediaMetaChanged``
      * ``vlc.EventType.MediaSubItemAdded``
      * ``vlc.EventType.MediaDurationChanged``
      * ``vlc.EventType.MediaParsedChanged``
      * ``vlc.EventType.MediaFreed``
      * ``vlc.EventType.MediaStateChanged``
      * ``vlc.EventType.MediaSubItemTreeAdded``
      * ``vlc.EventType.MediaPlayerMediaChanged``
      * ``vlc.EventType.MediaPlayerNothingSpecial``
      * ``vlc.EventType.MediaPlayerOpening``
      * ``vlc.EventType.MediaPlayerBuffering``
      * ``vlc.EventType.MediaPlayerPlaying``
      * ``vlc.EventType.MediaPlayerPaused``
      * ``vlc.EventType.MediaPlayerStopped``
      * ``vlc.EventType.MediaPlayerForward``
      * ``vlc.EventType.MediaPlayerBackward``
      * ``vlc.EventType.MediaPlayerEndReached``
      * ``vlc.EventType.MediaPlayerEncounteredError``
      * ``vlc.EventType.MediaPlayerTimeChanged``
      * ``vlc.EventType.MediaPlayerPositionChanged``
      * ``vlc.EventType.MediaPlayerSeekableChanged``
      * ``vlc.EventType.MediaPlayerPausableChanged``
      * ``vlc.EventType.MediaPlayerTitleChanged``
      * ``vlc.EventType.MediaPlayerSnapshotTaken``
      * ``vlc.EventType.MediaPlayerLengthChanged``
      * ``vlc.EventType.MediaPlayerVout``
      * ``vlc.EventType.MediaPlayerScrambledChanged``
      * ``vlc.EventType.MediaPlayerESAdded``
      * ``vlc.EventType.MediaPlayerESDeleted``
      * ``vlc.EventType.MediaPlayerESSelected``
      * ``vlc.EventType.MediaPlayerCorked``
      * ``vlc.EventType.MediaPlayerUncorked``
      * ``vlc.EventType.MediaPlayerMuted``
      * ``vlc.EventType.MediaPlayerUnmuted``
      * ``vlc.EventType.MediaPlayerAudioVolume``
      * ``vlc.EventType.MediaPlayerAudioDevice``
      * ``vlc.EventType.MediaPlayerChapterChanged``
      * ``vlc.EventType.MediaListItemAdded``
      * ``vlc.EventType.MediaListWillAddItem``
      * ``vlc.EventType.MediaListItemDeleted``
      * ``vlc.EventType.MediaListWillDeleteItem``
      * ``vlc.EventType.MediaListEndReached``
      * ``vlc.EventType.MediaListViewItemAdded``
      * ``vlc.EventType.MediaListViewWillAddItem``
      * ``vlc.EventType.MediaListViewItemDeleted``
      * ``vlc.EventType.MediaListViewWillDeleteItem``
      * ``vlc.EventType.MediaListPlayerPlayed``
      * ``vlc.EventType.MediaListPlayerNextItemSet``
      * ``vlc.EventType.MediaListPlayerStopped``
      * ``vlc.EventType.MediaDiscovererStarted``
    .. warning:: **Deprecated!** Useless event, it will be triggered only when calling
    libvlc_media_discoverer_start()
      * ``vlc.EventType.MediaDiscovererEnded``
    .. warning:: **Deprecated!** Useless event, it will be triggered only when calling
    libvlc_media_discoverer_stop()
      * ``vlc.EventType.RendererDiscovererItemAdded``
      * ``vlc.EventType.RendererDiscovererItemDeleted``
      * ``vlc.EventType.VlmMediaAdded``
      * ``vlc.EventType.VlmMediaRemoved``
      * ``vlc.EventType.VlmMediaChanged``
      * ``vlc.EventType.VlmMediaInstanceStarted``
      * ``vlc.EventType.VlmMediaInstanceStopped``
      * ``vlc.EventType.VlmMediaInstanceStatusInit``
      * ``vlc.EventType.VlmMediaInstanceStatusOpening``
      * ``vlc.EventType.VlmMediaInstanceStatusPlaying``
      * ``vlc.EventType.VlmMediaInstanceStatusPause``
      * ``vlc.EventType.VlmMediaInstanceStatusEnd``
      * ``vlc.EventType.VlmMediaInstanceStatusError``
    """

    _enum_names_ = ...
    MediaPlayerPlaying: "EventType"
    MediaPlayerPaused: "EventType"
    MediaPlayerStopped: "EventType"
    MediaPlayerTimeChanged: "EventType"
    MediaPlayerEndReached: "EventType"
    MediaListPlayerNextItemSet: "EventType"

class LogLevel(_Enum):
    """Logging messages level.

    .. note:: Future LibVLC versions may define new levels.

    Defined symbols:
      * ``vlc.LogLevel.DEBUG`` < Debug message
      * ``vlc.LogLevel.NOTICE`` < Important informational message
      * ``vlc.LogLevel.WARNING`` < Warning (potential error) message
      * ``vlc.LogLevel.ERROR`` < Error message
    """

    _enum_names_ = ...

class MediaDiscovererCategory(_Enum):
    """Category of a media discoverer
    See :func:`libvlc_media_discoverer_list_get`.

    Defined symbols:
      * ``vlc.MediaDiscovererCategory.devices`` devices, like portable music player
      * ``vlc.MediaDiscovererCategory.lan`` LAN/WAN services, like Upnp, SMB, or SAP
      * ``vlc.MediaDiscovererCategory.podcasts`` Podcasts
      * ``vlc.MediaDiscovererCategory.localdirs`` Local directories, like Video, Music or Pictures directories
    """

    _enum_names_ = ...

class MediaParseFlag(_Enum):
    """Parse flags used by :func:`libvlc_media_parse_with_options`

    See :func:`libvlc_media_parse_with_options`.

    Defined symbols:
      * ``vlc.MediaParseFlag.local`` Parse media if it's a local file
      * ``vlc.MediaParseFlag.network`` Parse media even if it's a network file
      * ``vlc.MediaParseFlag.fetch_local`` Fetch meta and covert art using local resources
      * ``vlc.MediaParseFlag.fetch_network`` Fetch meta and covert art using network resources
      * ``vlc.MediaParseFlag.do_interact`` Interact with the user (via libvlc_dialog_cbs) when preparsing this item
    (and not its sub items). Set this flag in order to receive a callback
    when the input is asking for credentials.
    """

    _enum_names_ = ...

class MediaParsedStatus(_Enum):
    """Parse status used sent by :func:`libvlc_media_parse_with_options` or returned by
    :func:`libvlc_media_get_parsed_status`

    See :func:`libvlc_media_parse_with_options`
    See :func:`libvlc_media_get_parsed_status`.

    Defined symbols:
      * ``vlc.MediaParsedStatus.skipped``
      * ``vlc.MediaParsedStatus.failed``
      * ``vlc.MediaParsedStatus.timeout``
      * ``vlc.MediaParsedStatus.done``
    """

    _enum_names_ = ...

class MediaPlayerRole(_Enum):
    """Media player roles.

    :version: LibVLC 3.0.0 and later.

    See :func:`libvlc_media_player_set_role`.

    Defined symbols:
      * ``vlc.MediaPlayerRole._None`` < Don't use a media player role
      * ``vlc.MediaPlayerRole.Music`` < Music (or radio) playback
      * ``vlc.MediaPlayerRole.Video`` < Video playback
      * ``vlc.MediaPlayerRole.Communication`` < Speech, real-time communication
      * ``vlc.MediaPlayerRole.Game`` < Video game
      * ``vlc.MediaPlayerRole.Notification`` < User interaction feedback
      * ``vlc.MediaPlayerRole.Animation`` < Embedded animation (e.g. in web page)
      * ``vlc.MediaPlayerRole.Production`` < Audio editting/production
      * ``vlc.MediaPlayerRole.Accessibility`` < Accessibility
      * ``vlc.MediaPlayerRole.Test`` Testing
    """

    _enum_names_ = ...

class MediaSlaveType(_Enum):
    """Type of a media slave: subtitle or audio.

    Defined symbols:
      * ``vlc.MediaSlaveType.subtitle``
      * ``vlc.MediaSlaveType.audio``
    """

    _enum_names_ = ...

class MediaType(_Enum):
    """Media type

    See :func:`libvlc_media_get_type`.

    Defined symbols:
      * ``vlc.MediaType.unknown``
      * ``vlc.MediaType.file``
      * ``vlc.MediaType.directory``
      * ``vlc.MediaType.disc``
      * ``vlc.MediaType.stream``
      * ``vlc.MediaType.playlist``
    """

    _enum_names_ = ...

class Meta(_Enum):
    """Meta data types.

    Defined symbols:
      * ``vlc.Meta.Title``
      * ``vlc.Meta.Artist``
      * ``vlc.Meta.Genre``
      * ``vlc.Meta.Copyright``
      * ``vlc.Meta.Album``
      * ``vlc.Meta.TrackNumber``
      * ``vlc.Meta.Description``
      * ``vlc.Meta.Rating``
      * ``vlc.Meta.Date``
      * ``vlc.Meta.Setting``
      * ``vlc.Meta.URL``
      * ``vlc.Meta.Language``
      * ``vlc.Meta.NowPlaying``
      * ``vlc.Meta.Publisher``
      * ``vlc.Meta.EncodedBy``
      * ``vlc.Meta.ArtworkURL``
      * ``vlc.Meta.TrackID``
      * ``vlc.Meta.TrackTotal``
      * ``vlc.Meta.Director``
      * ``vlc.Meta.Season``
      * ``vlc.Meta.Episode``
      * ``vlc.Meta.ShowName``
      * ``vlc.Meta.Actors``
      * ``vlc.Meta.AlbumArtist``
      * ``vlc.Meta.DiscNumber``
      * ``vlc.Meta.DiscTotal``
    """

    _enum_names_ = ...

class NavigateMode(_Enum):
    """Navigation mode.

    Defined symbols:
      * ``vlc.NavigateMode.activate``
      * ``vlc.NavigateMode.up``
      * ``vlc.NavigateMode.down``
      * ``vlc.NavigateMode.left``
      * ``vlc.NavigateMode.right``
      * ``vlc.NavigateMode.popup``
    """

    _enum_names_ = ...

class PlaybackMode(_Enum):
    """Defines playback modes for playlist.

    Defined symbols:
      * ``vlc.PlaybackMode.default``
      * ``vlc.PlaybackMode.loop``
      * ``vlc.PlaybackMode.repeat``
    """

    _enum_names_ = ...
    default: "PlaybackMode"
    loop: "PlaybackMode"
    repeat: "PlaybackMode"

class Position(_Enum):
    """Enumeration of values used to set position (e.g. of video title).

    Defined symbols:
      * ``vlc.Position.disable``
      * ``vlc.Position.center``
      * ``vlc.Position.left``
      * ``vlc.Position.right``
      * ``vlc.Position.top``
      * ``vlc.Position.top_left``
      * ``vlc.Position.top_right``
      * ``vlc.Position.bottom``
      * ``vlc.Position.bottom_left``
      * ``vlc.Position.bottom_right``
    """

    _enum_names_ = ...

class State(_Enum):
    """Note the order of :class:`State` enum must match exactly the order of
    See mediacontrol_PlayerStatus, See input_state_e enums,
    and VideoLAN.LibVLC.State (at bindings/cil/src/media.cs).

    Expected states by web plugins are:
    IDLE/CLOSE=0, OPENING=1, PLAYING=3, PAUSED=4,
    STOPPING=5, ENDED=6, ERROR=7.

    Defined symbols:
      * ``vlc.State.NothingSpecial``
      * ``vlc.State.Opening``
      * ``vlc.State.Buffering``
      * ``vlc.State.Playing``
      * ``vlc.State.Paused``
      * ``vlc.State.Stopped``
      * ``vlc.State.Ended``
      * ``vlc.State.Error``
    """

    _enum_names_ = ...

class TeletextKey(_Enum):
    """Enumeration of teletext keys than can be passed via
    :func:`libvlc_video_set_teletext`.

    Defined symbols:
      * ``vlc.TeletextKey.red``
      * ``vlc.TeletextKey.green``
      * ``vlc.TeletextKey.yellow``
      * ``vlc.TeletextKey.blue``
      * ``vlc.TeletextKey.index``
    """

    _enum_names_ = ...

class TrackType(_Enum):
    """

    Defined symbols:
      * ``vlc.TrackType.unknown``
      * ``vlc.TrackType.audio``
      * ``vlc.TrackType.video``
      * ``vlc.TrackType.ext``
    """

    _enum_names_ = ...

class VideoAdjustOption(_Enum):
    """option values for libvlc_video_get,set_adjust_int,float,bool.

    Defined symbols:
      * ``vlc.VideoAdjustOption.Enable``
      * ``vlc.VideoAdjustOption.Contrast``
      * ``vlc.VideoAdjustOption.Brightness``
      * ``vlc.VideoAdjustOption.Hue``
      * ``vlc.VideoAdjustOption.Saturation``
      * ``vlc.VideoAdjustOption.Gamma``
    """

    _enum_names_ = ...

class VideoLogoOption(_Enum):
    """option values for libvlc_video_get,set_logo_int,string.

    Defined symbols:
      * ``vlc.VideoLogoOption.logo_enable``
      * ``vlc.VideoLogoOption.logo_file`` < string argument, "file,d,t;file,d,t;..."
      * ``vlc.VideoLogoOption.logo_x`` < string argument, "file,d,t;file,d,t;..."
      * ``vlc.VideoLogoOption.logo_y``
      * ``vlc.VideoLogoOption.logo_delay``
      * ``vlc.VideoLogoOption.logo_repeat``
      * ``vlc.VideoLogoOption.logo_opacity``
      * ``vlc.VideoLogoOption.logo_position``
    """

    _enum_names_ = ...

class VideoMarqueeOption(_Enum):
    """Marq options definition.

    Defined symbols:
      * ``vlc.VideoMarqueeOption.Enable``
      * ``vlc.VideoMarqueeOption.Text`` string argument
      * ``vlc.VideoMarqueeOption.Color`` string argument
      * ``vlc.VideoMarqueeOption.Opacity``
      * ``vlc.VideoMarqueeOption.Position``
      * ``vlc.VideoMarqueeOption.Refresh``
      * ``vlc.VideoMarqueeOption.Size``
      * ``vlc.VideoMarqueeOption.Timeout``
      * ``vlc.VideoMarqueeOption.X``
      * ``vlc.VideoMarqueeOption.Y``
    """

    _enum_names_ = ...

class VideoOrient(_Enum):
    """

    Defined symbols:
      * ``vlc.VideoOrient.top_left`` < Normal. Top line represents top, left column left.
      * ``vlc.VideoOrient.top_right`` < Flipped horizontally
      * ``vlc.VideoOrient.bottom_left`` < Flipped vertically
      * ``vlc.VideoOrient.bottom_right`` < Rotated 180 degrees
      * ``vlc.VideoOrient.left_top`` < Transposed
      * ``vlc.VideoOrient.left_bottom`` < Rotated 90 degrees clockwise (or 270 anti-clockwise)
      * ``vlc.VideoOrient.right_top`` < Rotated 90 degrees anti-clockwise
      * ``vlc.VideoOrient.right_bottom`` < Anti-transposed
    """

    _enum_names_ = ...

class VideoProjection(_Enum):
    """

    Defined symbols:
      * ``vlc.VideoProjection.rectangular``
      * ``vlc.VideoProjection.equirectangular`` < 360 spherical
      * ``vlc.VideoProjection.cubemap_layout_standard`` < 360 spherical
    """

    _enum_names_ = ...

class ModuleDescription(_Cstruct):
    """Description of a module."""

    ...

class RdDescription(_Cstruct):
    """Renderer discoverer description

    See :func:`libvlc_renderer_discoverer_list_get`.
    """

    ...

class MediaStats(_Cstruct): ...

class MediaTrackInfo(_Cstruct):
    class U(ctypes.Union):
        class Audio(_Cstruct): ...
        class Video(_Cstruct): ...

class AudioTrack(_Cstruct): ...

class VideoViewpoint(_Cstruct):
    """Viewpoint

    .. warning:: allocate using :func:`libvlc_video_new_viewpoint`.
    """

    ...

class VideoTrack(_Cstruct): ...
class SubtitleTrack(_Cstruct): ...
class MediaTrack(_Cstruct): ...

class MediaSlave(_Cstruct):
    """A slave of a :class:`Media`
    See :func:`libvlc_media_slaves_get`.
    """

    ...

class TrackDescription(_Cstruct):
    """Description for video, audio tracks and subtitles. It contains
    id, name (description string) and pointer to next record.
    """

    ...

class TitleDescription(_Cstruct): ...

class ChapterDescription(_Cstruct):
    """Description for chapters."""

    ...

class AudioOutput(_Cstruct):
    """Description for audio output. It contains
    name, description and pointer to next record.
    """

    ...

class AudioOutputDevice(_Cstruct):
    """Description for audio output device."""

    ...

class MediaDiscovererDescription(_Cstruct):
    """Media discoverer description
    See :func:`libvlc_media_discoverer_list_get`.
    """

    ...

class Event(_Cstruct):
    """A LibVLC event."""
    class U(ctypes.Union):
        """< Object emitting the event."""
        class MediaMetaChanged(_Cstruct): ...
        class MediaSubitemAdded(_Cstruct): ...
        class MediaDurationChanged(_Cstruct): ...
        class MediaParsedChanged(_Cstruct): ...
        class MediaFreed(_Cstruct): ...
        class MediaStateChanged(_Cstruct): ...
        class MediaSubitemtreeAdded(_Cstruct): ...
        class MediaPlayerBuffering(_Cstruct): ...
        class MediaPlayerChapterChanged(_Cstruct): ...
        class MediaPlayerPositionChanged(_Cstruct): ...
        class MediaPlayerTimeChanged(_Cstruct): ...
        class MediaPlayerTitleChanged(_Cstruct): ...
        class MediaPlayerSeekableChanged(_Cstruct): ...
        class MediaPlayerPausableChanged(_Cstruct): ...
        class MediaPlayerScrambledChanged(_Cstruct): ...
        class MediaPlayerVout(_Cstruct): ...
        class MediaListItemAdded(_Cstruct): ...
        class MediaListWillAddItem(_Cstruct): ...
        class MediaListItemDeleted(_Cstruct): ...
        class MediaListWillDeleteItem(_Cstruct): ...
        class MediaListPlayerNextItemSet(_Cstruct): ...
        class MediaPlayerSnapshotTaken(_Cstruct): ...
        class MediaPlayerLengthChanged(_Cstruct): ...
        class VlmMediaEvent(_Cstruct): ...
        class MediaPlayerMediaChanged(_Cstruct): ...
        class MediaPlayerEsChanged(_Cstruct): ...
        class MediaPlayerAudioVolume(_Cstruct): ...
        class MediaPlayerAudioDevice(_Cstruct): ...
        class RendererDiscovererItemAdded(_Cstruct): ...
        class RendererDiscovererItemDeleted(_Cstruct): ...

class EventUnion(ctypes.Union):
    """A wrapper around the nested union :class:`Event.U` for backard compatibility."""

    _fields_ = ...

class DialogCbs(_Cstruct):
    """Dialog callbacks to be implemented."""

    PfDisplayError = ...
    PfDisplayLogin = ...
    PfDisplayQuestion = ...
    PfDisplayProgress = ...
    PfCancel = ...
    PfUpdateProgress = ...

class LogMessage(_Cstruct): ...

class AudioCleanupCb(ctypes.c_void_p):
    """Callback prototype for audio playback cleanup.

    This is called when the media player no longer needs an audio output.

    :param opaque: data pointer as passed to :func:`libvlc_audio_set_callbacks` [IN].
    """

    ...

class AudioDrainCb(ctypes.c_void_p):
    """Callback prototype for audio buffer drain.

    LibVLC may invoke this callback when the decoded audio track is ending.
    There will be no further decoded samples for the track, but playback should
    nevertheless continue until all already pending buffers are rendered.

    :param data: data pointer as passed to :func:`libvlc_audio_set_callbacks` [IN].
    """

    ...

class AudioFlushCb(ctypes.c_void_p):
    """Callback prototype for audio buffer flush.

    LibVLC invokes this callback if it needs to discard all pending buffers and
    stop playback as soon as possible. This typically occurs when the media is
    stopped.

    :param data: data pointer as passed to :func:`libvlc_audio_set_callbacks` [IN].
    """

    ...

class AudioPauseCb(ctypes.c_void_p):
    """Callback prototype for audio pause.

    LibVLC invokes this callback to pause audio playback.

    .. note:: The pause callback is never called if the audio is already paused.

    :param data: data pointer as passed to :func:`libvlc_audio_set_callbacks` [IN].
    :param pts: time stamp of the pause request (should be elapsed already).
    """

    ...

class AudioPlayCb(ctypes.c_void_p):
    """Callback prototype for audio playback.

    The LibVLC media player decodes and post-processes the audio signal
    asynchronously (in an internal thread). Whenever audio *samples* are ready
    to be queued to the output, this callback is invoked.

    The number of *samples* provided per invocation may depend on the file format,
    the audio coding algorithm, the decoder plug-in, the post-processing
    filters and timing. Application must not assume a certain number of *samples*.

    The exact format of audio *samples* is determined by :func:`libvlc_audio_set_format`
    or :func:`libvlc_audio_set_format_callbacks` as is the channels layout.

    Note that the number of *samples* is per channel. For instance, if the audio
    track sampling rate is 48000 Hz, then 1200 *samples* represent 25 milliseconds
    of audio signal - regardless of the number of audio channels.

    :param data: data pointer as passed to :func:`libvlc_audio_set_callbacks` [IN].
    :param samples: pointer to a table of audio samples to play back [IN].
    :param count: number of audio samples to play back.
    :param pts: expected play time stamp (see libvlc_delay).
    """

    ...

class AudioResumeCb(ctypes.c_void_p):
    """Callback prototype for audio resumption.

    LibVLC invokes this callback to resume audio playback after it was
    previously paused.

    .. note:: The resume callback is never called if the audio is not paused.

    :param data: data pointer as passed to :func:`libvlc_audio_set_callbacks` [IN].
    :param pts: time stamp of the resumption request (should be elapsed already).
    """

    ...

class AudioSetVolumeCb(ctypes.c_void_p):
    """Callback prototype for audio *volume* change.

    :param data: data pointer as passed to :func:`libvlc_audio_set_callbacks` [IN].
    :param volume: software volume (1. = nominal, 0. = mute).
    :param mute: muted flag.
    """

    ...

class AudioSetupCb(ctypes.c_void_p):
    """Callback prototype to setup the audio playback.

    This is called when the media player needs to create a new audio output.

    :param opaque: pointer to the data pointer passed to.
        :func:`libvlc_audio_set_callbacks` [IN/OUT].
    :param format: 4 bytes sample format [IN/OUT].
    :param rate: sample rate [IN/OUT].
    :param channels: channels count [IN/OUT].

    :return: 0 on success, anything else to skip audio playback.
    """

    ...

class Callback(ctypes.c_void_p):
    """Callback function notification.

    :param p_event: the event triggering the callback.
    """

    ...

class LogCb(ctypes.c_void_p):
    """Callback prototype for LibVLC log message handler.


    .. note:: Log message handlers **must** be thread-safe.
    .. warning:: The message context pointer, the format string parameters and the
        variable arguments are only valid until the callback returns.

    :param data: data pointer as given to :func:`libvlc_log_set`.
    :param level: message level (libvlc_log_level).
    :param ctx: message context (meta-information about the message).
    :param fmt: printf() format string (as defined by ISO C11).
    :param args: variable argument list for the format.
    """

    ...

class MediaCloseCb(ctypes.c_void_p):
    """Callback prototype to close a custom bitstream input media.

    :param opaque: private pointer as set by the :class:`MediaOpenCb`.
        callback.
    """

    ...

class MediaOpenCb(ctypes.c_void_p):
    """Callback prototype to open a custom bitstream input media.

    The same media item can be opened multiple times. Each time, this callback
    is invoked. It should allocate and initialize any instance-specific
    resources, then store them in **datap*. The instance resources can be freed
    in the :class:`MediaCloseCb` callback.

    .. note:: For convenience, **datap* is initially None and **sizep* is initially 0.

    :param opaque: private pointer as passed to :func:`libvlc_media_new_callbacks`.
    :param datap: storage space for a private data pointer [OUT].
    :param sizep: byte length of the bitstream or UINT64_MAX if unknown [OUT].

    :return: 0 on success, non-zero on error. In case of failure, the other.
        callbacks will not be invoked and any value stored in **datap* and **sizep* is.
        discarded.
    """

    ...

class MediaReadCb(ctypes.c_void_p):
    """Callback prototype to read data from a custom bitstream input media.

    .. note:: If no data is immediately available, then the callback should sleep.
    .. warning:: The application is responsible for avoiding deadlock situations.
        In particular, the callback should return an error if playback is stopped;
        if it does not return, then :func:`libvlc_media_player_stop` will never return.

    :param opaque: private pointer as set by the :class:`MediaOpenCb`.
        callback.
    :param buf: start address of the buffer to read data into.
    :param len: bytes length of the buffer.

    :return: strictly positive number of bytes read, 0 on end-of-stream,
        or -1 on non-recoverable error.
    """

    ...

class MediaSeekCb(ctypes.c_void_p):
    """Callback prototype to seek a custom bitstream input media.

    :param opaque: private pointer as set by the :class:`MediaOpenCb`.
        callback.
    :param offset: absolute byte offset to seek to.

    :return: 0 on success, -1 on error.
    """

    ...

class VideoCleanupCb(ctypes.c_void_p):
    """Callback prototype to configure picture buffers format.

    :param opaque: private pointer as passed to :func:`libvlc_video_set_callbacks`.
        (and possibly modified by libvlc_video_format_cb) [IN].
    """

    ...

class VideoDisplayCb(ctypes.c_void_p):
    """Callback prototype to display a *picture*.

    When the video frame needs to be shown, as determined by the media playback
    clock, the display callback is invoked.

    :param opaque: private pointer as passed to :func:`libvlc_video_set_callbacks` [IN].
    :param picture: private pointer returned from the :class:`VideoLockCb`.
        callback [IN].
    """

    ...

class VideoFormatCb(ctypes.c_void_p):
    """Callback prototype to configure picture buffers format.
    This callback gets the format of the video as output by the video decoder
    and the chain of video filters (if any). It can opt to change any parameter
    as it needs. In that case, LibVLC will attempt to convert the video format
    (rescaling and *chroma* conversion) but these operations can be CPU intensive.

    .. note::
        For each pixels plane, the scanline pitch must be bigger than or equal to
        the number of bytes per pixel multiplied by the pixel *width*.
        Similarly, the number of scanlines must be bigger than of equal to
        the pixel *height*.
        Furthermore, we recommend that *pitches* and *lines* be multiple of 32
        to not break assumptions that might be held by optimized code
        in the video decoders, video filters and/or video converters.

    :param opaque: pointer to the private pointer passed to.
        :func:`libvlc_video_set_callbacks` [IN/OUT].
    :param chroma: pointer to the 4 bytes video format identifier [IN/OUT].
    :param width: pointer to the pixel width [IN/OUT].
    :param height: pointer to the pixel height [IN/OUT].
    :param pitches: table of scanline pitches in bytes for each pixel plane.
        (the table is allocated by LibVLC) [OUT].
    :param lines: table of scanlines count for each plane [OUT].

    :return: the number of picture buffers allocated, 0 indicates failure.
    """

    ...

class VideoLockCb(ctypes.c_void_p):
    """Callback prototype to allocate and lock a picture buffer.

    Whenever a new video frame needs to be decoded, the lock callback is
    invoked. Depending on the video chroma, one or three pixel *planes* of
    adequate dimensions must be returned via the second parameter. Those
    planes must be aligned on 32-bytes boundaries.

    :param opaque: private pointer as passed to :func:`libvlc_video_set_callbacks` [IN].
    :param planes: start address of the pixel planes (LibVLC allocates the array.
        of void pointers, this callback must initialize the array) [OUT].

    :return: a private pointer for the display and unlock callbacks to identify.
        the picture buffers.
    """

    ...

class VideoUnlockCb(ctypes.c_void_p):
    """Callback prototype to unlock a *picture* buffer.

    When the video frame decoding is complete, the unlock callback is invoked.
    This callback might not be needed at all. It is only an indication that the
    application can now read the pixel values if it needs to.

    .. note:: A *picture* buffer is unlocked after the *picture* is decoded,
        but before the *picture* is displayed.

    :param opaque: private pointer as passed to :func:`libvlc_video_set_callbacks` [IN].
    :param picture: private pointer returned from the :class:`VideoLockCb`.
        callback [IN].
    :param planes: pixel planes as defined by the :class:`VideoLockCb`.
        callback (this parameter is only for convenience) [IN].
    """

    ...

class CallbackDecorators:
    """Class holding various method decorators for callback functions."""

    AudioCleanupCb = ...
    AudioDrainCb = ...
    AudioFlushCb = ...
    AudioPauseCb = ...
    AudioPlayCb = ...
    AudioResumeCb = ...
    AudioSetVolumeCb = ...
    AudioSetupCb = ...
    Callback = ...
    LogCb = ...
    MediaCloseCb = ...
    MediaOpenCb = ...
    MediaReadCb = ...
    MediaSeekCb = ...
    VideoCleanupCb = ...
    VideoDisplayCb = ...
    VideoFormatCb = ...
    VideoLockCb = ...
    VideoUnlockCb = ...

cb = CallbackDecorators

def libvlc_add_intf(p_instance, name):  # -> Any:
    """Try to start a user interface for the libvlc instance.

    :param p_instance: the instance.
    :param name: interface name, or None for default.

    :return: 0 on success, -1 on error.
    """
    ...

def libvlc_audio_equalizer_get_amp_at_index(p_equalizer, u_band):  # -> Any:
    """Get the amplification value for a particular equalizer frequency band.

    :param p_equalizer: valid equalizer handle, must not be None.
    :param u_band: index, counting from zero, of the frequency band to get.

    :return: amplification value (Hz); NaN if there is no such frequency band.
    :version: LibVLC 2.2.0 or later.
    """
    ...

def libvlc_audio_equalizer_get_band_count():  # -> Any:
    """Get the number of distinct frequency bands for an equalizer.

    :return: number of frequency bands.
    :version: LibVLC 2.2.0 or later.
    """
    ...

def libvlc_audio_equalizer_get_band_frequency(u_index):  # -> Any:
    """Get a particular equalizer band frequency.

    This value can be used, for example, to create a label for an equalizer band control
    in a user interface.

    :param u_index: index of the band, counting from zero.

    :return: equalizer band frequency (Hz), or -1 if there is no such band.
    :version: LibVLC 2.2.0 or later.
    """
    ...

def libvlc_audio_equalizer_get_preamp(p_equalizer):  # -> Any:
    """Get the current pre-amplification value from an equalizer.

    :param p_equalizer: valid equalizer handle, must not be None.

    :return: preamp value (Hz).
    :version: LibVLC 2.2.0 or later.
    """
    ...

def libvlc_audio_equalizer_get_preset_count():  # -> Any:
    """Get the number of equalizer presets.

    :return: number of presets.
    :version: LibVLC 2.2.0 or later.
    """
    ...

def libvlc_audio_equalizer_get_preset_name(u_index):  # -> Any:
    """Get the name of a particular equalizer preset.

    This name can be used, for example, to prepare a preset label or menu in a user
    interface.

    :param u_index: index of the preset, counting from zero.

    :return: preset name, or None if there is no such preset.
    :version: LibVLC 2.2.0 or later.
    """
    ...

def libvlc_audio_equalizer_new():  # -> Any:
    """Create a new default equalizer, with all frequency values zeroed.

    The new equalizer can subsequently be applied to a media player by invoking
    :func:`libvlc_media_player_set_equalizer`.

    The returned handle should be freed via :func:`libvlc_audio_equalizer_release` when
    it is no longer needed.

    :return: opaque equalizer handle, or None on error.
    :version: LibVLC 2.2.0 or later.
    """
    ...

def libvlc_audio_equalizer_new_from_preset(u_index):  # -> Any:
    """Create a new equalizer, with initial frequency values copied from an existing
    preset.

    The new equalizer can subsequently be applied to a media player by invoking
    :func:`libvlc_media_player_set_equalizer`.

    The returned handle should be freed via :func:`libvlc_audio_equalizer_release` when
    it is no longer needed.

    :param u_index: index of the preset, counting from zero.

    :return: opaque equalizer handle, or None on error.
    :version: LibVLC 2.2.0 or later.
    """
    ...

def libvlc_audio_equalizer_release(p_equalizer):  # -> Any:
    """Release a previously created equalizer instance.

    The equalizer was previously created by using :func:`libvlc_audio_equalizer_new` or
    :func:`libvlc_audio_equalizer_new_from_preset`.

    It is safe to invoke this method with a None *p_equalizer* parameter for no effect.

    :param p_equalizer: opaque equalizer handle, or None.

    :version: LibVLC 2.2.0 or later.
    """
    ...

def libvlc_audio_equalizer_set_amp_at_index(p_equalizer, f_amp, u_band):  # -> Any:
    """Set a new amplification value for a particular equalizer frequency band.

    The new equalizer settings are subsequently applied to a media player by invoking
    :func:`libvlc_media_player_set_equalizer`.

    The supplied amplification value will be clamped to the -20.0 to +20.0 range.

    :param p_equalizer: valid equalizer handle, must not be None.
    :param f_amp: amplification value (-20.0 to 20.0 Hz).
    :param u_band: index, counting from zero, of the frequency band to set.

    :return: zero on success, -1 on error.
    :version: LibVLC 2.2.0 or later.
    """
    ...

def libvlc_audio_equalizer_set_preamp(p_equalizer, f_preamp):  # -> Any:
    """Set a new pre-amplification value for an equalizer.

    The new equalizer settings are subsequently applied to a media player by invoking
    :func:`libvlc_media_player_set_equalizer`.

    The supplied amplification value will be clamped to the -20.0 to +20.0 range.

    :param p_equalizer: valid equalizer handle, must not be None.
    :param f_preamp: preamp value (-20.0 to 20.0 Hz).

    :return: zero on success, -1 on error.
    :version: LibVLC 2.2.0 or later.
    """
    ...

def libvlc_audio_filter_list_get(p_instance):  # -> Any:
    """Returns a list of audio filters that are available.

    See :class:`ModuleDescription`
    See :func:`libvlc_module_description_list_release`.

    :param p_instance: libvlc instance.

    :return: a list of module descriptions. It should be freed with :func:`libvlc_module_description_list_release`.
        In case of an error, None is returned.
    """
    ...

def libvlc_audio_get_channel(p_mi):  # -> Any:
    """Get current audio channel.

    :param p_mi: media player.

    :return: the audio channel See :class:`AudioOutputChannel`.
    """
    ...

def libvlc_audio_get_delay(p_mi):  # -> Any:
    """Get current audio delay.

    :param p_mi: media player.

    :return: the audio delay (microseconds).
    :version: LibVLC 1.1.1 or later.
    """
    ...

def libvlc_audio_get_mute(p_mi):  # -> Any:
    """Get current mute status.

    :param p_mi: media player.

    :return: the mute status (boolean) if defined, -1 if undefined/unapplicable.
    """
    ...

def libvlc_audio_get_track(p_mi):  # -> Any:
    """Get current audio track.

    :param p_mi: media player.

    :return: the audio track ID or -1 if no active input.
    """
    ...

def libvlc_audio_get_track_count(p_mi):  # -> Any:
    """Get number of available audio tracks.

    :param p_mi: media player.

    :return: the number of available audio tracks (int), or -1 if unavailable.
    """
    ...

def libvlc_audio_get_track_description(p_mi):  # -> Any:
    """Get the description of available audio tracks.

    :param p_mi: media player.

    :return: list with description of available audio tracks, or None.
        It must be freed with :func:`libvlc_track_description_list_release`.
    """
    ...

def libvlc_audio_get_volume(p_mi):  # -> Any:
    """Get current software audio volume.

    :param p_mi: media player.

    :return: the software volume in percents.
        (0 = mute, 100 = nominal / 0dB).
    """
    ...

def libvlc_audio_output_device_count(p_instance, psz_audio_output):  # -> Any:
    """Backward compatibility stub. Do not use in new code.

    .. warning:: **Deprecated!** Use :func:`libvlc_audio_output_device_list_get` instead.

    :return: always 0.
    """
    ...

def libvlc_audio_output_device_enum(mp):  # -> Any:
    """Gets a list of potential audio output devices,
    See :func:`libvlc_audio_output_device_set`.

    .. note:: Not all audio outputs support enumerating devices.
        The audio output may be functional even if the list is empty (None).

    .. note:: The list may not be exhaustive.

    .. warning:: Some audio output devices in the list might not actually work in
        some circumstances. By default, it is recommended to not specify any
        explicit audio device.

    :param mp: media player.

    :return: A None-terminated linked list of potential audio output devices.
        It must be freed with :func:`libvlc_audio_output_device_list_release`.
    :version: LibVLC 2.2.0 or later.
    """
    ...

def libvlc_audio_output_device_get(mp):  # -> Any:
    """Get the current audio output device identifier.

    This complements :func:`libvlc_audio_output_device_set`.

    .. warning:: The initial value for the current audio output device identifier
        may not be set or may be some unknown value. A LibVLC application should
        compare this value against the known device identifiers (e.g. those that
        were previously retrieved by a call to :func:`libvlc_audio_output_device_enum` or
        libvlc_audio_output_device_list_get) to find the current audio output device.

    It is possible that the selected audio output device changes (an external
    change) without a call to :func:`libvlc_audio_output_device_set`. That may make this
    method unsuitable to use if a LibVLC application is attempting to track
    dynamic audio device changes as they happen.

    :param mp: media player.

    :return: the current audio output device identifier.
        None if no device is selected or in case of error.
        (the result must be released with free() or libvlc_free).
    :version: LibVLC 3.0.0 or later.
    """
    ...

def libvlc_audio_output_device_id(p_instance, psz_audio_output, i_device):  # -> Any:
    """Backward compatibility stub. Do not use in new code.

    .. warning:: **Deprecated!** Use :func:`libvlc_audio_output_device_list_get` instead.

    :return: always None.
    """
    ...

def libvlc_audio_output_device_list_get(p_instance, aout):  # -> Any:
    """Gets a list of audio output devices for a given audio output module,
    See :func:`libvlc_audio_output_device_set`.

    .. note:: Not all audio outputs support this. In particular, an empty (None)
        list of devices does **not** imply that the specified audio output does
        not work.

    .. note:: The list might not be exhaustive.

    .. warning:: Some audio output devices in the list might not actually work in
        some circumstances. By default, it is recommended to not specify any
        explicit audio device.

    :param p_instance: libvlc instance.
    :param aout: audio output name.
        (as returned by libvlc_audio_output_list_get).

    :return: A None-terminated linked list of potential audio output devices.
        It must be freed with :func:`libvlc_audio_output_device_list_release`.
    :version: LibVLC 2.1.0 or later.
    """
    ...

def libvlc_audio_output_device_list_release(p_list):  # -> Any:
    """Frees a list of available audio output devices.

    :param p_list: list with audio outputs for release.

    :version: LibVLC 2.1.0 or later.
    """
    ...

def libvlc_audio_output_device_longname(p_instance, psz_output, i_device):  # -> Any:
    """Backward compatibility stub. Do not use in new code.

    .. warning:: **Deprecated!** Use :func:`libvlc_audio_output_device_list_get` instead.

    :return: always None.
    """
    ...

def libvlc_audio_output_device_set(mp, module, device_id):  # -> Any:
    """Configures an explicit audio output device.

    If the *module* paramater is None, audio output will be moved to the device
    specified by the device identifier string immediately. This is the
    recommended usage.

    A list of adequate potential device strings can be obtained with
    :func:`libvlc_audio_output_device_enum`.

    However passing None is supported in LibVLC version 2.2.0 and later only;
    in earlier versions, this function would have no effects when the module
    parameter was None.

    If the *module* parameter is not None, the device parameter of the
    corresponding audio output, if it exists, will be set to the specified
    string. Note that some audio output modules do not have such a parameter
    (notably MMDevice and PulseAudio).

    A list of adequate potential device strings can be obtained with
    :func:`libvlc_audio_output_device_list_get`.

    .. note:: This function does not select the specified audio output plugin.
        :func:`libvlc_audio_output_set` is used for that purpose.

    .. warning:: The syntax for the device parameter depends on the audio output.

    Some audio output modules require further parameters (e.g. a channels map
    in the case of ALSA).

    :param mp: media player.
    :param module: If None, current audio output module.
        if non-None, name of audio output module.
        (See libvlc_audio_output_t).
    :param device_id: device identifier string.

    :return: Nothing. Errors are ignored (this is a design bug).
    """
    ...

def libvlc_audio_output_get_device_type(p_mi):  # -> Any:
    """Stub for backward compatibility.

    :return: always -1.
    """
    ...

def libvlc_audio_output_list_get(p_instance):  # -> Any:
    """Gets the list of available audio output modules.

    :param p_instance: libvlc instance.

    :return: list of available audio outputs. It must be freed with.
        See :func:`libvlc_audio_output_list_release` See :class:`AudioOutput` .
        In case of error, None is returned.
    """
    ...

def libvlc_audio_output_list_release(p_list):  # -> Any:
    """Frees the list of available audio output modules.

    :param p_list: list with audio outputs for release.
    """
    ...

def libvlc_audio_output_set(p_mi, psz_name):  # -> Any:
    """Selects an audio output module.

    .. note:: Any change will take be effect only after playback is stopped and
        restarted. Audio output cannot be changed while playing.

    :param p_mi: media player.
    :param psz_name: name of audio output,
        use psz_name of See :class:`AudioOutput`.

    :return: 0 if function succeeded, -1 on error.
    """
    ...

def libvlc_audio_output_set_device_type(p_mp, device_type):  # -> Any:
    """Stub for backward compatibility."""
    ...

def libvlc_audio_set_callbacks(mp, play, pause, resume, flush, drain, opaque):  # -> Any:
    """Sets callbacks and private data for decoded audio.

    Use :func:`libvlc_audio_set_format` or :func:`libvlc_audio_set_format_callbacks`
    to configure the decoded audio format.

    .. note:: The audio callbacks override any other audio output mechanism.
        If the callbacks are set, LibVLC will **not** output audio in any way.

    :param mp: the media player.
    :param play: callback to play audio samples (must not be None).
    :param pause: callback to pause playback (or None to ignore).
    :param resume: callback to resume playback (or None to ignore).
    :param flush: callback to flush audio buffers (or None to ignore).
    :param drain: callback to drain audio buffers (or None to ignore).
    :param opaque: private pointer for the audio callbacks (as first parameter).

    :version: LibVLC 2.0.0 or later.
    """
    ...

def libvlc_audio_set_channel(p_mi, channel):  # -> Any:
    """Set current audio *channel*.

    :param p_mi: media player.
    :param channel: the audio channel, See :class:`AudioOutputChannel`.

    :return: 0 on success, -1 on error.
    """
    ...

def libvlc_audio_set_delay(p_mi, i_delay):  # -> Any:
    """Set current audio delay. The audio delay will be reset to zero each time the media changes.

    :param p_mi: media player.
    :param i_delay: the audio delay (microseconds).

    :return: 0 on success, -1 on error.
    :version: LibVLC 1.1.1 or later.
    """
    ...

def libvlc_audio_set_format(mp, format, rate, channels):  # -> Any:
    """Sets a fixed decoded audio *format*.

    This only works in combination with :func:`libvlc_audio_set_callbacks`,
    and is mutually exclusive with :func:`libvlc_audio_set_format_callbacks`.

    :param mp: the media player.
    :param format: a four-characters string identifying the sample format.
        (e.g. "S16N" or "f32l").
    :param rate: sample rate (expressed in Hz).
    :param channels: channels count.

    :version: LibVLC 2.0.0 or later.
    """
    ...

def libvlc_audio_set_format_callbacks(mp, setup, cleanup):  # -> Any:
    """Sets decoded audio format via callbacks.

    This only works in combination with :func:`libvlc_audio_set_callbacks`.

    :param mp: the media player.
    :param setup: callback to select the audio format (cannot be None).
    :param cleanup: callback to release any allocated resources (or None).

    :version: LibVLC 2.0.0 or later.
    """
    ...

def libvlc_audio_set_mute(p_mi, status):  # -> Any:
    """Set mute *status*.

    .. warning:: This function does not always work. If there are no active audio
        playback stream, the mute *status* might not be available. If digital
        pass-through (S/PDIF, HDMI...) is in use, muting may be unapplicable. Also
        some audio output plugins do not support muting at all.

    .. note:: To force silent playback, disable all audio tracks. This is more
        efficient and reliable than mute.

    :param p_mi: media player.
    :param status: If status is true then mute, otherwise unmute.
    """
    ...

def libvlc_audio_set_track(p_mi, i_track):  # -> Any:
    """Set current audio track.

    :param p_mi: media player.
    :param i_track: the track ID (i_id field from track description).

    :return: 0 on success, -1 on error.
    """
    ...

def libvlc_audio_set_volume(p_mi, i_volume):  # -> Any:
    """Set current software audio volume.

    :param p_mi: media player.
    :param i_volume: the volume in percents (0 = mute, 100 = 0dB).

    :return: 0 if the volume was set, -1 if it was out of range.
    """
    ...

def libvlc_audio_set_volume_callback(mp, set_volume):  # -> Any:
    """Set callbacks and private data for decoded audio. This only works in
    combination with :func:`libvlc_audio_set_callbacks`.
    Use :func:`libvlc_audio_set_format` or :func:`libvlc_audio_set_format_callbacks`
    to configure the decoded audio format.

    :param mp: the media player.
    :param set_volume: callback to apply audio volume,
        or None to apply volume in software.

    :version: LibVLC 2.0.0 or later.
    """
    ...

def libvlc_audio_toggle_mute(p_mi):  # -> Any:
    """Toggle mute status.

    .. warning:: Toggling mute atomically is not always possible: On some platforms,
        other processes can mute the VLC audio playback stream asynchronously. Thus,
        there is a small race condition where toggling will not work.
        See also the limitations of :func:`libvlc_audio_set_mute`.

    :param p_mi: media player.
    """
    ...

def libvlc_chapter_descriptions_release(p_chapters, i_count):  # -> Any:
    """Release a chapter description

    :param p_chapters: chapter description array to release.
    :param i_count: number of chapter descriptions to release.

    :version: LibVLC 3.0.0 and later.
    """
    ...

def libvlc_clearerr():  # -> Any:
    """Clears the LibVLC error status for the current thread. This is optional.
    By default, the error status is automatically overridden when a new error
    occurs, and destroyed when the thread exits.
    """
    ...

def libvlc_clock():  # -> Any:
    """Return the current time as defined by LibVLC. The unit is the microsecond.
    Time increases monotonically (regardless of time zone changes and RTC
    adjustements).
    The origin is arbitrary but consistent across the whole system
    (e.g. the system uptim, the time since the system was booted).

    .. note:: On systems that support it, the POSIX monotonic clock is used.
    """
    ...

def libvlc_dialog_dismiss(p_id):  # -> Any:
    """Dismiss a dialog

    After this call, *p_id* won't be valid anymore

    See :class:`DialogCbs`.pf_cancel

    :param p_id: id of the dialog.

    :return: 0 on success, or -1 on error.
    :version: LibVLC 3.0.0 and later.
    """
    ...

def libvlc_dialog_get_context(p_id):  # -> Any:
    """Return the opaque pointer associated with the dialog id

    :version: LibVLC 3.0.0 and later.
    """
    ...

def libvlc_dialog_post_action(p_id, i_action):  # -> Any:
    """Post a question answer

    After this call, *p_id* won't be valid anymore

    See :class:`DialogCbs`.pf_display_question

    :param p_id: id of the dialog.
    :param i_action: 1 for action1, 2 for action2.

    :return: 0 on success, or -1 on error.
    :version: LibVLC 3.0.0 and later.
    """
    ...

def libvlc_dialog_post_login(p_id, psz_username, psz_password, b_store):  # -> Any:
    """Post a login answer

    After this call, *p_id* won't be valid anymore

    See :class:`DialogCbs`.pf_display_login

    :param p_id: id of the dialog.
    :param psz_username: valid and non empty string.
    :param psz_password: valid string (can be empty).
    :param b_store: if true, store the credentials.

    :return: 0 on success, or -1 on error.
    :version: LibVLC 3.0.0 and later.
    """
    ...

def libvlc_dialog_set_callbacks(p_instance, p_cbs, p_data):  # -> Any:
    """Register callbacks in order to handle VLC dialogs

    :param p_cbs: a pointer to callbacks, or None to unregister callbacks.
    :param p_data: opaque pointer for the callback.

    :version: LibVLC 3.0.0 and later.
    """
    ...

def libvlc_dialog_set_context(p_id, p_context):  # -> Any:
    """Associate an opaque pointer with the dialog id

    :version: LibVLC 3.0.0 and later.
    """
    ...

def libvlc_errmsg():  # -> Any:
    """A human-readable error message for the last LibVLC error in the calling
    thread. The resulting string is valid until another error occurs (at least
    until the next LibVLC call).

    .. warning::
        This will be None if there was no error.
    """
    ...

def libvlc_event_attach(p_event_manager, i_event_type, f_callback, user_data):  # -> Any:
    """Register for an event notification.

    :param p_event_manager: the event manager to which you want to attach to.
        Generally it is obtained by vlc_my_object_event_manager() where.
        my_object is the object you want to listen to.
    :param i_event_type: the desired event to which we want to listen.
    :param f_callback: the function to call when i_event_type occurs.
    :param user_data: user provided data to carry with the event.

    :return: 0 on success, ENOMEM on error.
    """
    ...

def libvlc_event_detach(p_event_manager, i_event_type, f_callback, p_user_data):  # -> Any:
    """Unregister an event notification.

    :param p_event_manager: the event manager.
    :param i_event_type: the desired event to which we want to unregister.
    :param f_callback: the function to call when i_event_type occurs.
    :param p_user_data: user provided data to carry with the event.
    """
    ...

def libvlc_event_type_name(event_type):  # -> Any:
    """Get an event's type name.

    :param event_type: the desired event.
    """
    ...

def libvlc_free(ptr):  # -> Any:
    """Frees an heap allocation returned by a LibVLC function.
    If you know you're using the same underlying C run-time as the LibVLC
    implementation, then you can call ANSI C free() directly instead.

    :param ptr: the pointer.
    """
    ...

def libvlc_get_changeset():  # -> Any:
    """Retrieve libvlc changeset.

    Example: "aa9bce0bc4"

    :return: a string containing the libvlc changeset.
    """
    ...

def libvlc_get_compiler():  # -> Any:
    """Retrieve libvlc compiler version.

    Example: "gcc version 4.2.3 (Ubuntu 4.2.3-2ubuntu6)"

    :return: a string containing the libvlc compiler version.
    """
    ...

def libvlc_get_fullscreen(p_mi):  # -> Any:
    """Get current fullscreen status.

    :param p_mi: the media player.

    :return: the fullscreen status (boolean).
    """
    ...

def libvlc_get_log_verbosity(p_instance):  # -> Any:
    """Always returns minus one.
    This function is only provided for backward compatibility.

    :param p_instance: ignored.

    :return: always -1.
    """
    ...

def libvlc_get_version():  # -> Any:
    """Retrieve libvlc version.

    Example: "1.1.0-git The Luggage"

    :return: a string containing the libvlc version.
    """
    ...

def libvlc_log_clear(p_log):  # -> Any:
    """This function does nothing.
    It is only provided for backward compatibility.

    :param p_log: ignored.
    """
    ...

def libvlc_log_close(p_log):  # -> Any:
    """Frees memory allocated by :func:`libvlc_log_open`.

    :param p_log: libvlc log instance or None.
    """
    ...

def libvlc_log_count(p_log):  # -> Any:
    """Always returns zero.
    This function is only provided for backward compatibility.

    :param p_log: ignored.

    :return: always zero.
    """
    ...

def libvlc_log_get_context(ctx, module, file):  # -> Any:
    """Gets log message debug infos.

    This function retrieves self-debug information about a log message:

    * the name of the VLC *module* emitting the message,
    * the name of the source code *module* (i.e. *file*) and
    * the *line* number within the source code *module*.

    The returned *module* name and *file* name will be None if unknown.
    The returned *line* number will similarly be zero if unknown.

    .. warning:: The returned *module* name and source code *file* name, if non-None,
        are only valid until the logging callback returns.

    :param ctx: message context (as passed to the :class:`LogCb` callback).
    :param module: module name storage (or None) [OUT].
    :param file: source code file name storage (or None) [OUT].
    :param line: source code file line number storage (or None) [OUT].

    :version: LibVLC 2.1.0 or later.
    """
    ...

def libvlc_log_get_iterator(p_log):  # -> Any:
    """This function does nothing useful.
    It is only provided for backward compatibility.

    :param p_log: ignored.

    :return: an unique pointer or None on error or if the parameter was None.
    """
    ...

def libvlc_log_get_object(ctx, name, header, id):  # -> Any:
    """Gets log message info.

    This function retrieves meta-information about a log message:

    * the type *name* of the VLC object emitting the message,
    * the object *header* if any, and
    * a temporaly-unique object identifier.

    This information is mainly meant for **manual** troubleshooting.

    The returned type *name* may be "generic" if unknown, but it cannot be None.
    The returned *header* will be None if unset; in current versions, the header
    is used to distinguish for VLM inputs.
    The returned object ID will be zero if the message is not associated with
    any VLC object.

    .. warning:: The returned module *name* and source code file *name*, if non-None,
        are only valid until the logging callback returns.

    :param ctx: message context (as passed to the :class:`LogCb` callback).
    :param name: object name storage (or None) [OUT].
    :param header: object header (or None) [OUT].
    :param line: source code file line number storage (or None) [OUT].

    :version: LibVLC 2.1.0 or later.
    """
    ...

def libvlc_log_iterator_free(p_iter):  # -> Any:
    """Frees memory allocated by :func:`libvlc_log_get_iterator`.

    :param p_iter: libvlc log iterator or None.
    """
    ...

def libvlc_log_iterator_has_next(p_iter):  # -> Any:
    """Always returns zero.
    This function is only provided for backward compatibility.

    :param p_iter: ignored.

    :return: always zero.
    """
    ...

def libvlc_log_iterator_next(p_iter, p_buf):  # -> Any:
    """Always returns None.
    This function is only provided for backward compatibility.

    :param p_iter: libvlc log iterator or None.
    :param p_buf: ignored.

    :return: always None.
    """
    ...

def libvlc_log_open(p_instance):  # -> Any:
    """This function does nothing useful.
    It is only provided for backward compatibility.

    :param p_instance: libvlc instance.

    :return: an unique pointer or None on error.
    """
    ...

def libvlc_log_set(p_instance, cb, data):  # -> Any:
    """Sets the logging callback for a LibVLC instance.

    This function is thread-safe: it will wait for any pending callbacks
    invocation to complete.

    .. note:: Some log messages (especially debug) are emitted by LibVLC while
        is being initialized. These messages cannot be captured with this interface.

    .. warning:: A deadlock may occur if this function is called from the callback.

    :param cb: callback function pointer.
    :param data: opaque data pointer for the callback function.

    :param p_instance: libvlc instance.

    :version: LibVLC 2.1.0 or later.
    """
    ...

def libvlc_log_set_file(p_instance, stream):  # -> Any:
    """Sets up logging to a file.

    :param p_instance: libvlc instance.
    :param stream: FILE pointer opened for writing.
        (the FILE pointer must remain valid until libvlc_log_unset).

    :version: LibVLC 2.1.0 or later.
    """
    ...

def libvlc_log_unset(p_instance):  # -> Any:
    """Unsets the logging callback.

    This function deregisters the logging callback for a LibVLC instance.
    This is rarely needed as the callback is implicitly unset when the instance
    is destroyed.

    .. note:: This function will wait for any pending callbacks invocation to
        complete (causing a deadlock if called from within the callback).

    :param p_instance: libvlc instance.

    :version: LibVLC 2.1.0 or later.
    """
    ...

def libvlc_media_add_option(p_md, psz_options):  # -> Any:
    """Add an option to the media.

    This option will be used to determine how the media_player will
    read the media. This allows to use VLC's advanced
    reading/streaming options on a per-media basis.

    .. note:: The options are listed in 'vlc --long-help' from the command line,
        e.g. "-sout-all". Keep in mind that available options and their semantics
        vary across LibVLC versions and builds.
    .. warning:: Not all options affects :class:`Media` objects:
        Specifically, due to architectural issues most audio and video options,
        such as text renderer options, have no effects on an individual media.
        These options must be set through :func:`libvlc_new` instead.

    :param p_md: the media descriptor.
    :param psz_options: the options (as a string).
    """
    ...

def libvlc_media_add_option_flag(p_md, psz_options, i_flags):  # -> Any:
    """Add an option to the media with configurable flags.

    This option will be used to determine how the media_player will
    read the media. This allows to use VLC's advanced
    reading/streaming options on a per-media basis.

    The options are detailed in vlc --long-help, for instance
    "--sout-all". Note that all options are not usable on medias:
    specifically, due to architectural issues, video-related options
    such as text renderer options cannot be set on a single media. They
    must be set on the whole libvlc instance instead.

    :param p_md: the media descriptor.
    :param psz_options: the options (as a string).
    :param i_flags: the flags for this option.
    """
    ...

def libvlc_media_discoverer_event_manager(p_mdis):  # -> Any:
    """Get event manager from media service discover object.


    .. warning:: **Deprecated!** Useless, media_discoverer events are only triggered when calling
        :func:`libvlc_media_discoverer_start` and :func:`libvlc_media_discoverer_stop`.

    :param p_mdis: media service discover object.

    :return: event manager object.
    """
    ...

def libvlc_media_discoverer_is_running(p_mdis):  # -> Any:
    """Query if media service discover object is running.

    :param p_mdis: media service discover object.

    :return: true if running, false if not.
    """
    ...

def libvlc_media_discoverer_list_get(p_inst, i_cat, ppp_services):  # -> Any:
    """Get media discoverer services by category

    :param p_inst: libvlc instance.
    :param i_cat: category of services to fetch.
    :param ppp_services: address to store an allocated array of media discoverer.
        services (must be freed with :func:`libvlc_media_discoverer_list_release` by.
        the caller) [OUT].

    :return: the number of media discoverer services (0 on error).
    :version: LibVLC 3.0.0 and later.
    """
    ...

def libvlc_media_discoverer_list_release(pp_services, i_count):  # -> Any:
    """Release an array of media discoverer services

    See :func:`libvlc_media_discoverer_list_get`

    :param pp_services: array to release.
    :param i_count: number of elements in the array.

    :version: LibVLC 3.0.0 and later.
    """
    ...

def libvlc_media_discoverer_localized_name(p_mdis):  # -> Any:
    """Get media service discover object its localized name.


    .. warning:: **Deprecated!** Useless, use :func:`libvlc_media_discoverer_list_get` to get the
        longname of the service discovery.

    :param p_mdis: media discover object.

    :return: localized name or None if the media_discoverer is not started.
    """
    ...

def libvlc_media_discoverer_media_list(p_mdis):  # -> Any:
    """Get media service discover media list.

    :param p_mdis: media service discover object.

    :return: list of media items.
    """
    ...

def libvlc_media_discoverer_new(p_inst, psz_name):  # -> Any:
    """Create a media discoverer object by name.

    After this object is created, you should attach to media_list events in
    order to be notified of new items discovered.

    You need to call :func:`libvlc_media_discoverer_start` in order to start the
    discovery.

    See :func:`libvlc_media_discoverer_media_list`
    See :func:`libvlc_media_discoverer_event_manager`
    See :func:`libvlc_media_discoverer_start`

    :param p_inst: libvlc instance.
    :param psz_name: service name; use :func:`libvlc_media_discoverer_list_get` to get.
        a list of the discoverer names available in this libVLC instance.

    :return: media discover object or None in case of error.
    :version: LibVLC 3.0.0 or later.
    """
    ...

def libvlc_media_discoverer_new_from_name(p_inst, psz_name):  # -> Any:
    """.. warning:: **Deprecated!** Use :func:`libvlc_media_discoverer_new` and :func:`libvlc_media_discoverer_start`."""
    ...

def libvlc_media_discoverer_release(p_mdis):  # -> Any:
    """Release media discover object. If the reference count reaches 0, then
    the object will be released.

    :param p_mdis: media service discover object.
    """
    ...

def libvlc_media_discoverer_start(p_mdis):  # -> Any:
    """Start media discovery.

    To stop it, call :func:`libvlc_media_discoverer_stop` or
    :func:`libvlc_media_discoverer_list_release` directly.

    See :func:`libvlc_media_discoverer_stop`

    :param p_mdis: media discover object.

    :return: -1 in case of error, 0 otherwise.
    :version: LibVLC 3.0.0 or later.
    """
    ...

def libvlc_media_discoverer_stop(p_mdis):  # -> Any:
    """Stop media discovery.

    See :func:`libvlc_media_discoverer_start`

    :param p_mdis: media discover object.

    :version: LibVLC 3.0.0 or later.
    """
    ...

def libvlc_media_duplicate(p_md):  # -> Any:
    """Duplicate a media descriptor object.

    :param p_md: a media descriptor object.
    """
    ...

def libvlc_media_event_manager(p_md):  # -> Any:
    """Get event manager from media descriptor object.
    NOTE: this function doesn't increment reference counting.

    :param p_md: a media descriptor object.

    :return: event manager object.
    """
    ...

def libvlc_media_get_codec_description(i_type, i_codec):  # -> Any:
    """Get codec description from media elementary stream

    See :class:`MediaTrack`

    :param i_type: i_type from :class:`MediaTrack`.
    :param i_codec: i_codec or i_original_fourcc from :class:`MediaTrack`.

    :return: codec description.
    :version: LibVLC 3.0.0 and later.
    """
    ...

def libvlc_media_get_duration(p_md):  # -> Any:
    """Get duration (in ms) of media descriptor object item.

    :param p_md: media descriptor object.

    :return: duration of media item or -1 on error.
    """
    ...

def libvlc_media_get_meta(p_md, e_meta):  # -> Any:
    """Read the meta of the media.

    If the media has not yet been parsed this will return None.

    See :func:`libvlc_media_parse`
    See :func:`libvlc_media_parse_with_options`
    See libvlc_MediaMetaChanged

    :param p_md: the media descriptor.
    :param e_meta: the meta to read.

    :return: the media's meta.
    """
    ...

def libvlc_media_get_mrl(p_md):  # -> Any:
    """Get the media resource locator (mrl) from a media descriptor object

    :param p_md: a media descriptor object.

    :return: string with mrl of media descriptor object.
    """
    ...

def libvlc_media_get_parsed_status(p_md):  # -> Any:
    """Get Parsed status for media descriptor object.

    See libvlc_MediaParsedChanged
    See :class:`MediaParsedStatus`

    :param p_md: media descriptor object.

    :return: a value of the :class:`MediaParsedStatus` enum.
    :version: LibVLC 3.0.0 or later.
    """
    ...

def libvlc_media_get_state(p_md):  # -> Any:
    """Get current state of media descriptor object. Possible media states are
    libvlc_NothingSpecial=0, libvlc_Opening, libvlc_Playing, libvlc_Paused,
    libvlc_Stopped, libvlc_Ended, libvlc_Error.

    See :class:`State`.

    :param p_md: a media descriptor object.

    :return: state of media descriptor object.
    """
    ...

def libvlc_media_get_stats(p_md, p_stats):  # -> Any:
    """Get the current statistics about the media.

    :param p_md:: media descriptor object.
    :param p_stats:: structure that contain the statistics about the media.
        (this structure must be allocated by the caller).

    :return: true if the statistics are available, false otherwise.
    """
    ...

def libvlc_media_get_tracks_info(p_md):  # -> Any:
    """Get media descriptor's elementary streams description

    Note, you need to call :func:`libvlc_media_parse` or play the media at least once
    before calling this function.
    Not doing this will result in an empty array.


    .. warning:: **Deprecated!** Use :func:`libvlc_media_tracks_get` instead

    :param p_md: media descriptor object.
    :param tracks: address to store an allocated array of Elementary Streams.
        descriptions (must be freed by the caller) [OUT].

    :return: the number of Elementary Streams.
    """
    ...

def libvlc_media_get_type(p_md):  # -> Any:
    """Get the media type of the media descriptor object

    See :class:`MediaType`

    :param p_md: media descriptor object.

    :return: media type.
    :version: LibVLC 3.0.0 and later.
    """
    ...

def libvlc_media_get_user_data(p_md):  # -> Any:
    """Get media descriptor's user_data. user_data is specialized data
    accessed by the host application, VLC.framework uses it as a pointer to
    an native object that references a :class:`Media` pointer

    :param p_md: media descriptor object.
    """
    ...

def libvlc_media_is_parsed(p_md):  # -> Any:
    """Return true is the media descriptor object is parsed


    .. warning:: **Deprecated!** This can return true in case of failure.
        Use :func:`libvlc_media_get_parsed_status` instead

    See libvlc_MediaParsedChanged

    :param p_md: media descriptor object.

    :return: true if media object has been parsed otherwise it returns false.
    """
    ...

def libvlc_media_library_load(p_mlib):  # -> Any:
    """Load media library.

    :param p_mlib: media library object.

    :return: 0 on success, -1 on error.
    """
    ...

def libvlc_media_library_media_list(p_mlib):  # -> Any:
    """Get media library subitems.

    :param p_mlib: media library object.

    :return: media list subitems.
    """
    ...

def libvlc_media_library_new(p_instance):  # -> Any:
    """Create an new Media Library object

    :param p_instance: the libvlc instance.

    :return: a new object or None on error.
    """
    ...

def libvlc_media_library_release(p_mlib):  # -> Any:
    """Release media library object. This functions decrements the
    reference count of the media library object. If it reaches 0,
    then the object will be released.

    :param p_mlib: media library object.
    """
    ...

def libvlc_media_library_retain(p_mlib):  # -> Any:
    """Retain a reference to a media library object. This function will
    increment the reference counting for this object. Use
    :func:`libvlc_media_library_release` to decrement the reference count.

    :param p_mlib: media library object.
    """
    ...

def libvlc_media_list_add_media(p_ml, p_md):  # -> Any:
    """Add media instance to media list
    The :func:`libvlc_media_list_lock` should be held upon entering this function.

    :param p_ml: a media list instance.
    :param p_md: a media instance.

    :return: 0 on success, -1 if the media list is read-only.
    """
    ...

def libvlc_media_list_count(p_ml):  # -> Any:
    """Get count on media list items
    The :func:`libvlc_media_list_lock` should be held upon entering this function.

    :param p_ml: a media list instance.

    :return: number of items in media list.
    """
    ...

def libvlc_media_list_event_manager(p_ml):  # -> Any:
    """Get libvlc_event_manager from this media list instance.
    The p_event_manager is immutable, so you don't have to hold the lock

    :param p_ml: a media list instance.

    :return: libvlc_event_manager.
    """
    ...

def libvlc_media_list_index_of_item(p_ml, p_md):  # -> Any:
    """Find index position of List media instance in media list.
    Warning: the function will return the first matched position.
    The :func:`libvlc_media_list_lock` should be held upon entering this function.

    :param p_ml: a media list instance.
    :param p_md: media instance.

    :return: position of media instance or -1 if media not found.
    """
    ...

def libvlc_media_list_insert_media(p_ml, p_md, i_pos):  # -> Any:
    """Insert media instance in media list on a position
    The :func:`libvlc_media_list_lock` should be held upon entering this function.

    :param p_ml: a media list instance.
    :param p_md: a media instance.
    :param i_pos: position in array where to insert.

    :return: 0 on success, -1 if the media list is read-only.
    """
    ...

def libvlc_media_list_is_readonly(p_ml):  # -> Any:
    """This indicates if this media list is read-only from a user point of view

    :param p_ml: media list instance.

    :return: 1 on readonly, 0 on readwrite.
    """
    ...

def libvlc_media_list_item_at_index(p_ml, i_pos):  # -> Any:
    """List media instance in media list at a position
    The :func:`libvlc_media_list_lock` should be held upon entering this function.

    :param p_ml: a media list instance.
    :param i_pos: position in array where to insert.

    :return: media instance at position *i_pos*, or None if not found.
        In case of success, :func:`libvlc_media_retain` is called to increase the refcount.
        on the media.
    """
    ...

def libvlc_media_list_lock(p_ml):  # -> Any:
    """Get lock on media list items

    :param p_ml: a media list instance.
    """
    ...

def libvlc_media_list_media(p_ml):  # -> Any:
    """Get media instance from this media list instance. This action will increase
    the refcount on the media instance.
    The :func:`libvlc_media_list_lock` should NOT be held upon entering this function.

    :param p_ml: a media list instance.

    :return: media instance.
    """
    ...

def libvlc_media_list_new(p_instance):  # -> Any:
    """Create an empty media list.

    :param p_instance: libvlc instance.

    :return: empty media list, or None on error.
    """
    ...

def libvlc_media_list_player_event_manager(p_mlp):  # -> Any:
    """Return the event manager of this media_list_player.

    :param p_mlp: media list player instance.

    :return: the event manager.
    """
    ...

def libvlc_media_list_player_get_media_player(p_mlp):  # -> Any:
    """Get media player of the media_list_player instance.


    .. note:: the caller is responsible for releasing the returned instance.

    :param p_mlp: media list player instance.

    :return: media player instance.
    """
    ...

def libvlc_media_list_player_get_state(p_mlp):  # -> Any:
    """Get current libvlc_state of media list player

    :param p_mlp: media list player instance.

    :return: :class:`State` for media list player.
    """
    ...

def libvlc_media_list_player_is_playing(p_mlp):  # -> Any:
    """Is media list playing?

    :param p_mlp: media list player instance.

    :return: true for playing and false for not playing.
    """
    ...

def libvlc_media_list_player_new(p_instance):  # -> Any:
    """Create new media_list_player.

    :param p_instance: libvlc instance.

    :return: media list player instance or None on error.
    """
    ...

def libvlc_media_list_player_next(p_mlp):  # -> Any:
    """Play next item from media list

    :param p_mlp: media list player instance.

    :return: 0 upon success -1 if there is no next item.
    """
    ...

def libvlc_media_list_player_pause(p_mlp):  # -> Any:
    """Toggle pause (or resume) media list

    :param p_mlp: media list player instance.
    """
    ...

def libvlc_media_list_player_play(p_mlp):  # -> Any:
    """Play media list

    :param p_mlp: media list player instance.
    """
    ...

def libvlc_media_list_player_play_item(p_mlp, p_md):  # -> Any:
    """Play the given media item

    :param p_mlp: media list player instance.
    :param p_md: the media instance.

    :return: 0 upon success, -1 if the media is not part of the media list.
    """
    ...

def libvlc_media_list_player_play_item_at_index(p_mlp, i_index):  # -> Any:
    """Play media list item at position index

    :param p_mlp: media list player instance.
    :param i_index: index in media list to play.

    :return: 0 upon success -1 if the item wasn't found.
    """
    ...

def libvlc_media_list_player_previous(p_mlp):  # -> Any:
    """Play previous item from media list

    :param p_mlp: media list player instance.

    :return: 0 upon success -1 if there is no previous item.
    """
    ...

def libvlc_media_list_player_release(p_mlp):  # -> Any:
    """Release a media_list_player after use
    Decrement the reference count of a media player object. If the
    reference count is 0, then :func:`libvlc_media_list_player_release` will
    release the media player object. If the media player object
    has been released, then it should not be used again.

    :param p_mlp: media list player instance.
    """
    ...

def libvlc_media_list_player_retain(p_mlp):  # -> Any:
    """Retain a reference to a media player list object. Use
    :func:`libvlc_media_list_player_release` to decrement reference count.

    :param p_mlp: media player list object.
    """
    ...

def libvlc_media_list_player_set_media_list(p_mlp, p_mlist):  # -> Any:
    """Set the media list associated with the player

    :param p_mlp: media list player instance.
    :param p_mlist: list of media.
    """
    ...

def libvlc_media_list_player_set_media_player(p_mlp, p_mi):  # -> Any:
    """Replace media player in media_list_player with this instance.

    :param p_mlp: media list player instance.
    :param p_mi: media player instance.
    """
    ...

def libvlc_media_list_player_set_pause(p_mlp, do_pause):  # -> Any:
    """Pause or resume media list

    :param p_mlp: media list player instance.
    :param do_pause: play/resume if zero, pause if non-zero.

    :version: LibVLC 3.0.0 or later.
    """
    ...

def libvlc_media_list_player_set_playback_mode(p_mlp, e_mode):  # -> Any:
    """Sets the playback mode for the playlist

    :param p_mlp: media list player instance.
    :param e_mode: playback mode specification.
    """
    ...

def libvlc_media_list_player_stop(p_mlp):  # -> Any:
    """Stop playing media list

    :param p_mlp: media list player instance.
    """
    ...

def libvlc_media_list_release(p_ml):  # -> Any:
    """Release media list created with :func:`libvlc_media_list_new`.

    :param p_ml: a media list created with :func:`libvlc_media_list_new`.
    """
    ...

def libvlc_media_list_remove_index(p_ml, i_pos):  # -> Any:
    """Remove media instance from media list on a position
    The :func:`libvlc_media_list_lock` should be held upon entering this function.

    :param p_ml: a media list instance.
    :param i_pos: position in array where to insert.

    :return: 0 on success, -1 if the list is read-only or the item was not found.
    """
    ...

def libvlc_media_list_retain(p_ml):  # -> Any:
    """Retain reference to a media list

    :param p_ml: a media list created with :func:`libvlc_media_list_new`.
    """
    ...

def libvlc_media_list_set_media(p_ml, p_md):  # -> Any:
    """Associate media instance with this media list instance.
    If another media instance was present it will be released.
    The :func:`libvlc_media_list_lock` should NOT be held upon entering this function.

    :param p_ml: a media list instance.
    :param p_md: media instance to add.
    """
    ...

def libvlc_media_list_unlock(p_ml):  # -> Any:
    """Release lock on media list items
    The :func:`libvlc_media_list_lock` should be held upon entering this function.

    :param p_ml: a media list instance.
    """
    ...

def libvlc_media_new_as_node(p_instance, psz_name):  # -> Any:
    """Create a media as an empty node with a given name.

    See :func:`libvlc_media_release`

    :param p_instance: the instance.
    :param psz_name: the name of the node.

    :return: the new empty media or None on error.
    """
    ...

def libvlc_media_new_callbacks(instance, open_cb, read_cb, seek_cb, close_cb, opaque):  # -> Any:
    """Create a media with custom callbacks to read the data from.

    .. note:: If *open_cb* is None, the *opaque* pointer will be passed to *read_cb*,
        *seek_cb* and *close_cb*, and the stream size will be treated as unknown.

    .. note:: The callbacks may be called asynchronously (from another thread).
        A single stream *instance* need not be reentrant. However the *open_cb* needs to
        be reentrant if the media is used by multiple player instances.

    .. warning:: The callbacks may be used until all or any player instances
        that were supplied the media item are stopped.

    See :func:`libvlc_media_release`

    :param instance: LibVLC instance.
    :param open_cb: callback to open the custom bitstream input media.
    :param read_cb: callback to read data (must not be None).
    :param seek_cb: callback to seek, or None if seeking is not supported.
    :param close_cb: callback to close the media, or None if unnecessary.
    :param opaque: data pointer for the open callback.

    :return: the newly created media or None on error.

    :version: LibVLC 3.0.0 and later.
    """
    ...

def libvlc_media_new_fd(p_instance, fd):  # -> Any:
    """Create a media for an already open file descriptor.
    The file descriptor shall be open for reading (or reading and writing).

    Regular file descriptors, pipe read descriptors and character device
    descriptors (including TTYs) are supported on all platforms.
    Block device descriptors are supported where available.
    Directory descriptors are supported on systems that provide fdopendir().
    Sockets are supported on all platforms where they are file descriptors,
    i.e. all except Windows.

    .. note:: This library will **not** automatically close the file descriptor
        under any circumstance. Nevertheless, a file descriptor can usually only be
        rendered once in a media player. To render it a second time, the file
        descriptor should probably be rewound to the beginning with lseek().

    See :func:`libvlc_media_release`

    :param p_instance: the instance.
    :param fd: open file descriptor.

    :return: the newly created media or None on error.
    :version: LibVLC 1.1.5 and later.
    """
    ...

def libvlc_media_new_location(p_instance, psz_mrl):  # -> Any:
    """Create a media with a certain given media resource location,
    for instance a valid URL.

    .. note:: To refer to a local file with this function,
        the file://... URI syntax **must** be used (see IETF RFC3986).
        We recommend using :func:`libvlc_media_new_path` instead when dealing with
        local files.

    See :func:`libvlc_media_release`

    :param p_instance: the instance.
    :param psz_mrl: the media location.

    :return: the newly created media or None on error.
    """
    ...

def libvlc_media_new_path(p_instance, path):  # -> Any:
    """Create a media for a certain file *path*.

    See :func:`libvlc_media_release`

    :param p_instance: the instance.
    :param path: local filesystem path.

    :return: the newly created media or None on error.
    """
    ...

def libvlc_media_parse(p_md):  # -> Any:
    """Parse a media.

    This fetches (local) art, meta data and tracks information.
    The method is synchronous.


    .. warning:: **Deprecated!** This function could block indefinitely.
        Use :func:`libvlc_media_parse_with_options` instead

    See :func:`libvlc_media_parse_with_options`
    See :func:`libvlc_media_get_meta`
    See :func:`libvlc_media_get_tracks_info`

    :param p_md: media descriptor object.
    """
    ...

def libvlc_media_parse_async(p_md):  # -> Any:
    """Parse a media.

    This fetches (local) art, meta data and tracks information.
    The method is the asynchronous of :func:`libvlc_media_parse`.

    To track when this is over you can listen to libvlc_MediaParsedChanged
    event. However if the media was already parsed you will not receive this
    event.


    .. warning:: **Deprecated!** You can't be sure to receive the libvlc_MediaParsedChanged
        event (you can wait indefinitely for this event).
        Use :func:`libvlc_media_parse_with_options` instead

    See :func:`libvlc_media_parse`
    See libvlc_MediaParsedChanged
    See :func:`libvlc_media_get_meta`
    See :func:`libvlc_media_get_tracks_info`

    :param p_md: media descriptor object.
    """
    ...

def libvlc_media_parse_stop(p_md):  # -> Any:
    """Stop the parsing of the media

    When the media parsing is stopped, the libvlc_MediaParsedChanged event will
    be sent with the libvlc_media_parsed_status_timeout status.

    See :func:`libvlc_media_parse_with_options`

    :param p_md: media descriptor object.

    :version: LibVLC 3.0.0 or later.
    """
    ...

def libvlc_media_parse_with_options(p_md, parse_flag, timeout):  # -> Any:
    """Parse the media asynchronously with options.

    This fetches (local or network) art, meta data and/or tracks information.
    This method is the extended version of :func:`libvlc_media_parse_with_options`.

    To track when this is over you can listen to libvlc_MediaParsedChanged
    event. However if this functions returns an error, you will not receive any
    events.

    It uses a flag to specify parse options (see libvlc_media_parse_flag_t). All
    these flags can be combined. By default, media is parsed if it's a local
    file.

    .. note:: Parsing can be aborted with :func:`libvlc_media_parse_stop`.

    See libvlc_MediaParsedChanged
    See :func:`libvlc_media_get_meta`
    See :func:`libvlc_media_tracks_get`
    See :func:`libvlc_media_get_parsed_status`
    See :class:`MediaParseFlag`

    :param p_md: media descriptor object.
    :param parse_flag: parse options:
    :param timeout: maximum time allowed to preparse the media. If -1, the.
        default "preparse-timeout" option will be used as a timeout. If 0, it will.
        wait indefinitely. If > 0, the timeout will be used (in milliseconds).

    :return: -1 in case of error, 0 otherwise.
    :version: LibVLC 3.0.0 or later.
    """
    ...

def libvlc_media_player_add_slave(p_mi, i_type, psz_uri, b_select):  # -> Any:
    """Add a slave to the current media player.

    .. note:: If the player is playing, the slave will be added directly. This call
        will also update the slave list of the attached :class:`Media`.

    See :func:`libvlc_media_slaves_add`

    :param p_mi: the media player.
    :param i_type: subtitle or audio.
    :param psz_uri: Uri of the slave (should contain a valid scheme).
    :param b_select: True if this slave should be selected when it's loaded.

    :return: 0 on success, -1 on error.
    :version: LibVLC 3.0.0 and later.
    """
    ...

def libvlc_media_player_can_pause(p_mi):  # -> Any:
    """Can this media player be paused?

    :param p_mi: the media player.

    :return: true if the media player can pause.
    """
    ...

def libvlc_media_player_event_manager(p_mi):  # -> Any:
    """Get the Event Manager from which the media player send event.

    :param p_mi: the Media Player.

    :return: the event manager associated with p_mi.
    """
    ...

def libvlc_media_player_get_agl(p_mi):  # -> Any:
    """.. warning:: **Deprecated!** Use :func:`libvlc_media_player_get_nsobject` instead."""
    ...

def libvlc_media_player_get_chapter(p_mi):  # -> Any:
    """Get movie chapter.

    :param p_mi: the Media Player.

    :return: chapter number currently playing, or -1 if there is no media.
    """
    ...

def libvlc_media_player_get_chapter_count(p_mi):  # -> Any:
    """Get movie chapter count

    :param p_mi: the Media Player.

    :return: number of chapters in movie, or -1.
    """
    ...

def libvlc_media_player_get_chapter_count_for_title(p_mi, i_title):  # -> Any:
    """Get title chapter count

    :param p_mi: the Media Player.
    :param i_title: title.

    :return: number of chapters in title, or -1.
    """
    ...

def libvlc_media_player_get_fps(p_mi):  # -> Any:
    """Get movie fps rate

    This function is provided for backward compatibility. It cannot deal with
    multiple video tracks. In LibVLC versions prior to 3.0, it would also fail
    if the file format did not convey the frame rate explicitly.


    .. warning:: **Deprecated!** Consider using :func:`libvlc_media_tracks_get` instead.

    :param p_mi: the Media Player.

    :return: frames per second (fps) for this playing movie, or 0 if unspecified.
    """
    ...

def libvlc_media_player_get_full_chapter_descriptions(p_mi, i_chapters_of_title, pp_chapters):  # -> Any:
    """Get the full description of available chapters

    :param p_mi: the media player.
    :param i_chapters_of_title: index of the title to query for chapters (uses current title if set to -1).
    :param pp_chapters: address to store an allocated array of chapter descriptions.
        descriptions (must be freed with :func:`libvlc_chapter_descriptions_release`.
        by the caller) [OUT].

    :return: the number of chapters (-1 on error).
    :version: LibVLC 3.0.0 and later.
    """
    ...

def libvlc_media_player_get_full_title_descriptions(p_mi, titles):  # -> Any:
    """Get the full description of available titles

    :param p_mi: the media player.
    :param titles: address to store an allocated array of title descriptions.
        descriptions (must be freed with :func:`libvlc_title_descriptions_release`.
        by the caller) [OUT].

    :return: the number of *titles* (-1 on error).
    :version: LibVLC 3.0.0 and later.
    """
    ...

def libvlc_media_player_get_hwnd(p_mi):  # -> Any:
    """Get the Windows API window handle (HWND) previously set with
    :func:`libvlc_media_player_set_hwnd`. The handle will be returned even if LibVLC
    is not currently outputting any video to it.

    :param p_mi: the Media Player.

    :return: a window handle or None if there are none.
    """
    ...

def libvlc_media_player_get_length(p_mi):  # -> Any:
    """Get the current movie length (in ms).

    :param p_mi: the Media Player.

    :return: the movie length (in ms), or -1 if there is no media.
    """
    ...

def libvlc_media_player_get_media(p_mi):  # -> Any:
    """Get the media used by the media_player.

    :param p_mi: the Media Player.

    :return: the media associated with *p_mi*, or None if no.
        media is associated.
    """
    ...

def libvlc_media_player_get_nsobject(p_mi):  # -> Any:
    """Get the NSView handler previously set with :func:`libvlc_media_player_set_nsobject`.

    :param p_mi: the Media Player.

    :return: the NSView handler or 0 if none where set.
    """
    ...

def libvlc_media_player_get_position(p_mi):  # -> Any:
    """Get movie position as percentage between 0.0 and 1.0.

    :param p_mi: the Media Player.

    :return: movie position, or -1. in case of error.
    """
    ...

def libvlc_media_player_get_rate(p_mi):  # -> Any:
    """Get the requested movie play rate.
    .. warning:: Depending on the underlying media, the requested rate may be
        different from the real playback rate.

    :param p_mi: the Media Player.

    :return: movie play rate.
    """
    ...

def libvlc_media_player_get_role(p_mi):  # -> Any:
    """Gets the media role.

    :param p_mi: media player.

    :return: the media player role (libvlc_media_player_role_t).
    :version: LibVLC 3.0.0 and later.
    """
    ...

def libvlc_media_player_get_state(p_mi):  # -> Any:
    """Get current movie state

    :param p_mi: the Media Player.

    :return: the current state of the media player (playing, paused, ...) See :class:`State`.
    """
    ...

def libvlc_media_player_get_time(p_mi):  # -> Any:
    """Get the current movie time (in ms).

    :param p_mi: the Media Player.

    :return: the movie time (in ms), or -1 if there is no media.
    """
    ...

def libvlc_media_player_get_title(p_mi):  # -> Any:
    """Get movie title

    :param p_mi: the Media Player.

    :return: title number currently playing, or -1.
    """
    ...

def libvlc_media_player_get_title_count(p_mi):  # -> Any:
    """Get movie title count

    :param p_mi: the Media Player.

    :return: title number count, or -1.
    """
    ...

def libvlc_media_player_get_xwindow(p_mi):  # -> Any:
    """Get the X Window System window identifier previously set with
    :func:`libvlc_media_player_set_xwindow`. Note that this will return the identifier
    even if VLC is not currently using it (for instance if it is playing an
    audio-only input).

    :param p_mi: the Media Player.

    :return: an X window ID, or 0 if none where set.
    """
    ...

def libvlc_media_player_has_vout(p_mi):  # -> Any:
    """How many video outputs does this media player have?

    :param p_mi: the media player.

    :return: the number of video outputs.
    """
    ...

def libvlc_media_player_is_playing(p_mi):  # -> Any:
    """is_playing

    :param p_mi: the Media Player.

    :return: 1 if the media player is playing, 0 otherwise.
    """
    ...

def libvlc_media_player_is_seekable(p_mi):  # -> Any:
    """Is this media player seekable?

    :param p_mi: the media player.

    :return: true if the media player can seek.
    """
    ...

def libvlc_media_player_navigate(p_mi, navigate):  # -> Any:
    """Navigate through DVD Menu

    :param p_mi: the Media Player.
    :param navigate: the Navigation mode.

    :version: libVLC 2.0.0 or later.
    """
    ...

def libvlc_media_player_new(p_libvlc_instance):  # -> Any:
    """Create an empty Media Player object

    :param p_libvlc_instance: the libvlc instance in which the Media Player.
        should be created.

    :return: a new media player object, or None on error.
    """
    ...

def libvlc_media_player_new_from_media(p_md):  # -> Any:
    """Create a Media Player object from a Media

    :param p_md: the media. Afterwards the p_md can be safely.
        destroyed.

    :return: a new media player object, or None on error.
    """
    ...

def libvlc_media_player_next_chapter(p_mi):  # -> Any:
    """Set next chapter (if applicable)

    :param p_mi: the Media Player.
    """
    ...

def libvlc_media_player_next_frame(p_mi):  # -> Any:
    """Display the next frame (if supported)

    :param p_mi: the media player.
    """
    ...

def libvlc_media_player_pause(p_mi):  # -> Any:
    """Toggle pause (no effect if there is no media)

    :param p_mi: the Media Player.
    """
    ...

def libvlc_media_player_play(p_mi):  # -> Any:
    """Play

    :param p_mi: the Media Player.

    :return: 0 if playback started (and was already started), or -1 on error.
    """
    ...

def libvlc_media_player_previous_chapter(p_mi):  # -> Any:
    """Set previous chapter (if applicable)

    :param p_mi: the Media Player.
    """
    ...

def libvlc_media_player_program_scrambled(p_mi):  # -> Any:
    """Check if the current program is scrambled

    :param p_mi: the media player.

    :return: true if the current program is scrambled.

    :version: LibVLC 2.2.0 or later.
    """
    ...

def libvlc_media_player_release(p_mi):  # -> Any:
    """Release a media_player after use
    Decrement the reference count of a media player object. If the
    reference count is 0, then :func:`libvlc_media_player_release` will
    release the media player object. If the media player object
    has been released, then it should not be used again.

    :param p_mi: the Media Player to free.
    """
    ...

def libvlc_media_player_retain(p_mi):  # -> Any:
    """Retain a reference to a media player object. Use
    :func:`libvlc_media_player_release` to decrement reference count.

    :param p_mi: media player object.
    """
    ...

def libvlc_media_player_set_agl(p_mi, drawable):  # -> Any:
    """.. warning:: **Deprecated!** Use :func:`libvlc_media_player_set_nsobject` instead."""
    ...

def libvlc_media_player_set_android_context(p_mi, p_awindow_handler):  # -> Any:
    """Set the android context.

    :param p_mi: the media player.
    :param p_awindow_handler: org.videolan.libvlc.AWindow jobject owned by the.
        org.videolan.libvlc.MediaPlayer class from the libvlc-android project.

    :version: LibVLC 3.0.0 and later.
    """
    ...

def libvlc_media_player_set_chapter(p_mi, i_chapter):  # -> Any:
    """Set movie chapter (if applicable).

    :param p_mi: the Media Player.
    :param i_chapter: chapter number to play.
    """
    ...

def libvlc_media_player_set_equalizer(p_mi, p_equalizer):  # -> Any:
    """Apply new equalizer settings to a media player.

    The equalizer is first created by invoking :func:`libvlc_audio_equalizer_new` or
    :func:`libvlc_audio_equalizer_new_from_preset`.

    It is possible to apply new equalizer settings to a media player whether the media
    player is currently playing media or not.

    Invoking this method will immediately apply the new equalizer settings to the audio
    output of the currently playing media if there is any.

    If there is no currently playing media, the new equalizer settings will be applied
    later if and when new media is played.

    Equalizer settings will automatically be applied to subsequently played media.

    To disable the equalizer for a media player invoke this method passing None for the
    p_equalizer parameter.

    The media player does not keep a reference to the supplied equalizer so it is safe
    for an application to release the equalizer reference any time after this method
    returns.

    :param p_mi: opaque media player handle.
    :param p_equalizer: opaque equalizer handle, or None to disable the equalizer for this media player.

    :return: zero on success, -1 on error.
    :version: LibVLC 2.2.0 or later.
    """
    ...

def libvlc_media_player_set_evas_object(p_mi, p_evas_object):  # -> Any:
    """Set the EFL Evas Object.

    :param p_mi: the media player.
    :param p_evas_object: a valid EFL Evas Object (Evas_Object).

    :return: -1 if an error was detected, 0 otherwise.
    :version: LibVLC 3.0.0 and later.
    """
    ...

def libvlc_media_player_set_hwnd(p_mi, drawable):  # -> Any:
    """Set a Win32/Win64 API window handle (HWND) where the media player should
    render its video output. If LibVLC was built without Win32/Win64 API output
    support, then this has no effects.

    .. warning:: the HWND must have the WS_CLIPCHILDREN set in its style.

    :param p_mi: the Media Player.
    :param drawable: windows handle of the drawable.
    """
    ...

def libvlc_media_player_set_media(p_mi, p_md):  # -> Any:
    """Set the media that will be used by the media_player. If any,
    previous md will be released.

    :param p_mi: the Media Player.
    :param p_md: the Media. Afterwards the p_md can be safely.
        destroyed.
    """
    ...

def libvlc_media_player_set_nsobject(p_mi, drawable):  # -> Any:
    """Set the NSView handler where the media player should render its video output.

    Use the vout called "macosx".

    The *drawable* is an NSObject that follow the VLCOpenGLVideoViewEmbedding
    protocol:

    .. code-block:: objectivec++

        @protocol VLCOpenGLVideoViewEmbedding <NSObject>
        - (void)addVoutSubview:(NSView *)view;
        - (void)removeVoutSubview:(NSView *)view;
        @end

    Or it can be an NSView object.

    If you want to use it along with Qt see the QMacCocoaViewContainer. Then
    the following code should work:

    .. code-block:: objectivec++

        NSView *video = [[NSView alloc] init];
        QMacCocoaViewContainer *container = new QMacCocoaViewContainer(video, parent);
        libvlc_media_player_set_nsobject(mp, video);
        [video release];


    You can find a live example in VLCVideoView in VLCKit.framework.

    :param p_mi: the Media Player.
    :param drawable: the drawable that is either an NSView or an object following.
        the VLCOpenGLVideoViewEmbedding protocol.
    """
    ...

def libvlc_media_player_set_pause(mp, do_pause):  # -> Any:
    """Pause or resume (no effect if there is no media)

    :param mp: the Media Player.
    :param do_pause: play/resume if zero, pause if non-zero.

    :version: LibVLC 1.1.1 or later.
    """
    ...

def libvlc_media_player_set_position(p_mi, f_pos):  # -> Any:
    """Set movie position as percentage between 0.0 and 1.0.
    This has no effect if playback is not enabled.
    This might not work depending on the underlying input format and protocol.

    :param p_mi: the Media Player.
    :param f_pos: the position.
    """
    ...

def libvlc_media_player_set_rate(p_mi, rate):  # -> Any:
    """Set movie play rate

    :param p_mi: the Media Player.
    :param rate: movie play rate to set.

    :return: -1 if an error was detected, 0 otherwise (but even then, it might.
        not actually work depending on the underlying media protocol).
    """
    ...

def libvlc_media_player_set_renderer(p_mi, p_item):  # -> Any:
    """Set a renderer to the media player

    .. note:: must be called before the first call of :func:`libvlc_media_player_play` to
        take effect.

    See :func:`libvlc_renderer_discoverer_new`

    :param p_mi: the Media Player.
    :param p_item: an item discovered by :func:`libvlc_renderer_discoverer_start`.

    :return: 0 on success, -1 on error.
    :version: LibVLC 3.0.0 or later.
    """
    ...

def libvlc_media_player_set_role(p_mi, role):  # -> Any:
    """Sets the media *role*.

    :param p_mi: media player.
    :param role: the media player role (libvlc_media_player_role_t).

    :return: 0 on success, -1 on error.
    """
    ...

def libvlc_media_player_set_time(p_mi, i_time):  # -> Any:
    """Set the movie time (in ms). This has no effect if no media is being played.
    Not all formats and protocols support this.

    :param p_mi: the Media Player.
    :param i_time: the movie time (in ms).
    """
    ...

def libvlc_media_player_set_title(p_mi, i_title):  # -> Any:
    """Set movie title

    :param p_mi: the Media Player.
    :param i_title: title number to play.
    """
    ...

def libvlc_media_player_set_video_title_display(p_mi, position, timeout):  # -> Any:
    """Set if, and how, the video title will be shown when media is played.

    :param p_mi: the media player.
    :param position: position at which to display the title, or libvlc_position_disable to prevent the title from being displayed.
    :param timeout: title display timeout in milliseconds (ignored if libvlc_position_disable).

    :version: libVLC 2.1.0 or later.
    """
    ...

def libvlc_media_player_set_xwindow(p_mi, drawable):  # -> Any:
    """Set an X Window System *drawable* where the media player should render its
    video output. The call takes effect when the playback starts. If it is
    already started, it might need to be stopped before changes apply.
    If LibVLC was built without X11 output support, then this function has no
    effects.

    By default, LibVLC will capture input events on the video rendering area.
    Use :func:`libvlc_video_set_mouse_input` and :func:`libvlc_video_set_key_input` to
    disable that and deliver events to the parent window / to the application
    instead. By design, the X11 protocol delivers input events to only one
    recipient.

    .. warning::
        The application must call the XInitThreads() function from Xlib before
        :func:`libvlc_new`, and before any call to XOpenDisplay() directly or via any
        other library. Failure to call XInitThreads() will seriously impede LibVLC
        performance. Calling XOpenDisplay() before XInitThreads() will eventually
        crash the process. That is a limitation of Xlib.

    .. note::
        The specified identifier must correspond to an existing Input/Output class
        X11 window. Pixmaps are **not** currently supported. The default X11
        server is assumed, i.e. that specified in the DISPLAY environment variable.

    .. warning::
        LibVLC can deal with invalid X11 handle errors, however some display drivers
        (EGL, GLX, VA and/or VDPAU) can unfortunately not. Thus the window handle
        must remain valid until playback is stopped, otherwise the process may
        abort or crash.

    :param p_mi: media player.
    :param drawable: X11 window ID.

    :bug:
        No more than one window handle per media player instance can be specified.
        If the media has multiple simultaneously active video tracks, extra tracks.
        will be rendered into external windows beyond the control of the.
        application.
    """
    ...

def libvlc_media_player_stop(p_mi):  # -> Any:
    """Stop (no effect if there is no media)

    :param p_mi: the Media Player.
    """
    ...

def libvlc_media_player_will_play(p_mi):  # -> Any:
    """Is the player able to play

    :param p_mi: the Media Player.

    :return: boolean.
    """
    ...

def libvlc_media_release(p_md):  # -> Any:
    """Decrement the reference count of a media descriptor object. If the
    reference count is 0, then :func:`libvlc_media_release` will release the
    media descriptor object. It will send out an libvlc_MediaFreed event
    to all listeners. If the media descriptor object has been released it
    should not be used again.

    :param p_md: the media descriptor.
    """
    ...

def libvlc_media_retain(p_md):  # -> Any:
    """Retain a reference to a media descriptor object (libvlc_media_t). Use
    :func:`libvlc_media_release` to decrement the reference count of a
    media descriptor object.

    :param p_md: the media descriptor.
    """
    ...

def libvlc_media_save_meta(p_md):  # -> Any:
    """Save the meta previously set

    :param p_md: the media desriptor.

    :return: true if the write operation was successful.
    """
    ...

def libvlc_media_set_meta(p_md, e_meta, psz_value):  # -> Any:
    """Set the meta of the media (this function will not save the meta, call
    :func:`libvlc_media_save_meta` in order to save the meta)

    :param p_md: the media descriptor.
    :param e_meta: the meta to write.
    :param psz_value: the media's meta.
    """
    ...

def libvlc_media_set_user_data(p_md, p_new_user_data):  # -> Any:
    """Sets media descriptor's user_data. user_data is specialized data
    accessed by the host application, VLC.framework uses it as a pointer to
    an native object that references a :class:`Media` pointer

    :param p_md: media descriptor object.
    :param p_new_user_data: pointer to user data.
    """
    ...

def libvlc_media_slaves_add(p_md, i_type, i_priority, psz_uri):  # -> Any:
    """Add a slave to the current media.

    A slave is an external input source that may contains an additional subtitle
    track (like a .srt) or an additional audio track (like a .ac3).

    .. note:: This function must be called before the media is parsed (via
        libvlc_media_parse_with_options) or before the media is played (via
        libvlc_media_player_play)

    :param p_md: media descriptor object.
    :param i_type: subtitle or audio.
    :param i_priority: from 0 (low priority) to 4 (high priority).
    :param psz_uri: Uri of the slave (should contain a valid scheme).

    :return: 0 on success, -1 on error.
    :version: LibVLC 3.0.0 and later.
    """
    ...

def libvlc_media_slaves_clear(p_md):  # -> Any:
    """Clear all slaves previously added by :func:`libvlc_media_slaves_add` or
    internally.

    :param p_md: media descriptor object.

    :version: LibVLC 3.0.0 and later.
    """
    ...

def libvlc_media_slaves_get(p_md, ppp_slaves):  # -> Any:
    """Get a media descriptor's slave list

    The list will contain slaves parsed by VLC or previously added by
    :func:`libvlc_media_slaves_add`. The typical use case of this function is to save
    a list of slave in a database for a later use.

    See :func:`libvlc_media_slaves_add`

    :param p_md: media descriptor object.
    :param ppp_slaves: address to store an allocated array of slaves (must be.
        freed with libvlc_media_slaves_release) [OUT].

    :return: the number of slaves (zero on error).
    :version: LibVLC 3.0.0 and later.
    """
    ...

def libvlc_media_slaves_release(pp_slaves, i_count):  # -> Any:
    """Release a media descriptor's slave list

    :param pp_slaves: slave array to release.
    :param i_count: number of elements in the array.

    :version: LibVLC 3.0.0 and later.
    """
    ...

def libvlc_media_subitems(p_md):  # -> Any:
    """Get subitems of media descriptor object. This will increment
    the reference count of supplied media descriptor object. Use
    :func:`libvlc_media_list_release` to decrement the reference counting.

    :param p_md: media descriptor object.

    :return: list of media descriptor subitems or None.
    """
    ...

def libvlc_media_tracks_get(p_md, tracks):  # -> Any:
    """Get media descriptor's elementary streams description

    Note, you need to call :func:`libvlc_media_parse` or play the media at least once
    before calling this function.
    Not doing this will result in an empty array.

    :param p_md: media descriptor object.
    :param tracks: address to store an allocated array of Elementary Streams.
        descriptions (must be freed with :func:`libvlc_media_tracks_release`.
        by the caller) [OUT].

    :return: the number of Elementary Streams (zero on error).
    :version: LibVLC 2.1.0 and later.
    """
    ...

def libvlc_media_tracks_release(p_tracks, i_count):  # -> Any:
    """Release media descriptor's elementary streams description array

    :param p_tracks: tracks info array to release.
    :param i_count: number of elements in the array.

    :version: LibVLC 2.1.0 and later.
    """
    ...

def libvlc_module_description_list_release(p_list):  # -> Any:
    """Release a list of module descriptions.

    :param p_list: the list to be released.
    """
    ...

def libvlc_new(argc, argv):  # -> Any:
    """Create and initialize a libvlc instance.
    This functions accept a list of "command line" arguments similar to the
    main(). These arguments affect the LibVLC instance default configuration.

    .. note::
        LibVLC may create threads. Therefore, any thread-unsafe process
        initialization must be performed before calling :func:`libvlc_new`. In particular
        and where applicable:

            * setlocale() and textdomain(),
            * setenv(), unsetenv() and putenv(),
            * with the X11 display system, XInitThreads()
                (see also libvlc_media_player_set_xwindow) and
            * on Microsoft Windows, SetErrorMode().
            * sigprocmask() shall never be invoked; pthread_sigmask() can be used.

    On POSIX systems, the SIGCHLD signal **must not** be ignored, i.e. the
    signal handler must set to SIG_DFL or a function pointer, not SIG_IGN.
    Also while LibVLC is active, the wait() function shall not be called, and
    any call to waitpid() shall use a strictly positive value for the first
    parameter (i.e. the PID). Failure to follow those rules may lead to a
    deadlock or a busy loop.
    Also on POSIX systems, it is recommended that the SIGPIPE signal be blocked,
    even if it is not, in principles, necessary, e.g.:

    .. code-block:: objectivec++

        sigset_t set;

        signal(SIGCHLD, SIG_DFL);
        sigemptyset(&set);
        sigaddset(&set, SIGPIPE);
        pthread_sigmask(SIG_BLOCK, &set, None);

    On Microsoft Windows Vista/2008, the process error mode
    SEM_FAILCRITICALERRORS flag **must** be set before using LibVLC.
    On later versions, that is optional and unnecessary.
    Also on Microsoft Windows (Vista and any later version), setting the default
    DLL directories to SYSTEM32 exclusively is strongly recommended for
    security reasons:

    .. code-block:: objectivec++

        SetErrorMode(SEM_FAILCRITICALERRORS);
        SetDefaultDllDirectories(LOAD_LIBRARY_SEARCH_SYSTEM32);

    .. warning::
        There is absolutely no warranty or promise of forward, backward and
        cross-platform compatibility with regards to :func:`libvlc_new` arguments.
        We recommend that you do not use them, other than when debugging.

    :param argc: the number of arguments (should be 0).
    :param argv: list of arguments (should be None).

    :return: the libvlc instance or None in case of error.
    :version:
        Arguments are meant to be passed from the command line to LibVLC, just like.
        VLC media player does. The list of valid arguments depends on the LibVLC.
        version, the operating system and platform, and set of available LibVLC.
        plugins. Invalid or unsupported arguments will cause the function to fail.
        (i.e. return None). Also, some arguments may alter the behaviour or.
        otherwise interfere with other LibVLC functions.
    """
    ...

def libvlc_playlist_play(p_instance, i_id, i_options, ppsz_options):  # -> Any:
    """Start playing (if there is any item in the playlist).

    Additionnal playlist item options can be specified for addition to the
    item before it is played.

    :param p_instance: the playlist instance.
    :param i_id: the item to play. If this is a negative number, the next.
        item will be selected. Otherwise, the item with the given ID will be.
        played.
    :param i_options: the number of options to add to the item.
    :param ppsz_options: the options to add to the item.
    """
    ...

def libvlc_printerr(fmt):  # -> Any:
    """Sets the LibVLC error status and message for the current thread.
    Any previous error is overridden.

    :param fmt: the format string.
    :param args: the arguments.

    :return: a nul terminated string in any case.
    """
    ...

def libvlc_release(p_instance):  # -> Any:
    """Decrement the reference count of a libvlc instance, and destroy it
    if it reaches zero.

    :param p_instance: the instance to destroy.
    """
    ...

def libvlc_renderer_discoverer_event_manager(p_rd):  # -> Any:
    """Get the event manager of the renderer discoverer

    The possible events to attach are libvlc_RendererDiscovererItemAdded
    and libvlc_RendererDiscovererItemDeleted.

    The :class:`Renderer` struct passed to event callbacks is owned by
    VLC, users should take care of holding/releasing this struct for their
    internal usage.

    See :class:`Event`.u.renderer_discoverer_item_added.item
    See :class:`Event`.u.renderer_discoverer_item_removed.item

    :return: a valid event manager (can't fail).
    :version: LibVLC 3.0.0 or later.
    """
    ...

def libvlc_renderer_discoverer_list_get(p_inst, ppp_services):  # -> Any:
    """Get media discoverer services

    See libvlc_renderer_list_release

    :param p_inst: libvlc instance.
    :param ppp_services: address to store an allocated array of renderer.
        discoverer services (must be freed with libvlc_renderer_list_release by.
        the caller) [OUT].

    :return: the number of media discoverer services (0 on error).
    :version: LibVLC 3.0.0 and later.
    """
    ...

def libvlc_renderer_discoverer_list_release(pp_services, i_count):  # -> Any:
    """Release an array of media discoverer services

    See :func:`libvlc_renderer_discoverer_list_get`

    :param pp_services: array to release.
    :param i_count: number of elements in the array.

    :version: LibVLC 3.0.0 and later.
    """
    ...

def libvlc_renderer_discoverer_new(p_inst, psz_name):  # -> Any:
    """Create a renderer discoverer object by name

    After this object is created, you should attach to events in order to be
    notified of the discoverer events.

    You need to call :func:`libvlc_renderer_discoverer_start` in order to start the
    discovery.

    See :func:`libvlc_renderer_discoverer_event_manager`
    See :func:`libvlc_renderer_discoverer_start`

    :param p_inst: libvlc instance.
    :param psz_name: service name; use :func:`libvlc_renderer_discoverer_list_get` to.
        get a list of the discoverer names available in this libVLC instance.

    :return: media discover object or None in case of error.
    :version: LibVLC 3.0.0 or later.
    """
    ...

def libvlc_renderer_discoverer_release(p_rd):  # -> Any:
    """Release a renderer discoverer object

    :param p_rd: renderer discoverer object.

    :version: LibVLC 3.0.0 or later.
    """
    ...

def libvlc_renderer_discoverer_start(p_rd):  # -> Any:
    """Start renderer discovery

    To stop it, call :func:`libvlc_renderer_discoverer_stop` or
    :func:`libvlc_renderer_discoverer_release` directly.

    See :func:`libvlc_renderer_discoverer_stop`

    :param p_rd: renderer discoverer object.

    :return: -1 in case of error, 0 otherwise.
    :version: LibVLC 3.0.0 or later.
    """
    ...

def libvlc_renderer_discoverer_stop(p_rd):  # -> Any:
    """Stop renderer discovery.

    See :func:`libvlc_renderer_discoverer_start`

    :param p_rd: renderer discoverer object.

    :version: LibVLC 3.0.0 or later.
    """
    ...

def libvlc_renderer_item_flags(p_item):  # -> Any:
    """Get the flags of a renderer item

    See LIBVLC_RENDERER_CAN_AUDIO
    See LIBVLC_RENDERER_CAN_VIDEO

    :return: bitwise flag: capabilities of the renderer, see.
    :version: LibVLC 3.0.0 or later.
    """
    ...

def libvlc_renderer_item_hold(p_item):  # -> Any:
    """Hold a renderer item, i.e. creates a new reference

    This functions need to called from the libvlc_RendererDiscovererItemAdded
    callback if the libvlc user wants to use this item after. (for display or
    for passing it to the mediaplayer for example).

    :return: the current item.
    :version: LibVLC 3.0.0 or later.
    """
    ...

def libvlc_renderer_item_icon_uri(p_item):  # -> Any:
    """Get the icon uri of a renderer item

    :return: the uri of the item's icon (can be None, must *not* be freed).
    :version: LibVLC 3.0.0 or later.
    """
    ...

def libvlc_renderer_item_name(p_item):  # -> Any:
    """Get the human readable name of a renderer item

    :return: the name of the item (can't be None, must *not* be freed).
    :version: LibVLC 3.0.0 or later.
    """
    ...

def libvlc_renderer_item_release(p_item):  # -> Any:
    """Releases a renderer item, i.e. decrements its reference counter

    :version: LibVLC 3.0.0 or later.
    """
    ...

def libvlc_renderer_item_type(p_item):  # -> Any:
    """Get the type (not translated) of a renderer item. For now, the type can only
    be "chromecast" ("upnp", "airplay" may come later).

    :return: the type of the item (can't be None, must *not* be freed).
    :version: LibVLC 3.0.0 or later.
    """
    ...

def libvlc_retain(p_instance):  # -> Any:
    """Increments the reference count of a libvlc instance.
    The initial reference count is 1 after :func:`libvlc_new` returns.

    :param p_instance: the instance to reference.
    """
    ...

def libvlc_set_app_id(p_instance, id, version, icon):  # -> Any:
    """Sets some meta-information about the application.
    See also :func:`libvlc_set_user_agent`.

    :param p_instance: LibVLC instance.
    :param id: Java-style application identifier, e.g. "com.acme.foobar".
    :param version: application version numbers, e.g. "1.2.3".
    :param icon: application icon name, e.g. "foobar".

    :version: LibVLC 2.1.0 or later.
    """
    ...

LibvlcSetExitHandlerCb = ...

def libvlc_set_exit_handler(p_instance, cb, opaque):  # -> Any:
    """Registers a callback for the LibVLC exit event. This is mostly useful if
    the VLC playlist and/or at least one interface are started with
    :func:`libvlc_playlist_play` or :func:`libvlc_add_intf` respectively.
    Typically, this function will wake up your application main loop (from
    another thread).

    .. note:: This function should be called before the playlist or interface are
        started. Otherwise, there is a small race condition: the exit event could
        be raised before the handler is registered.

    .. warning:: This function and :func:`libvlc_wait` cannot be used at the same time.

    :param p_instance: LibVLC instance.
    :param cb: callback to invoke when LibVLC wants to exit,
        or None to disable the exit handler (as by default).
    :param opaque: data pointer for the callback.
    """
    ...

def libvlc_set_fullscreen(p_mi, b_fullscreen):  # -> Any:
    """Enable or disable fullscreen.

    .. warning:: With most window managers, only a top-level windows can be in
        full-screen mode. Hence, this function will not operate properly if
        :func:`libvlc_media_player_set_xwindow` was used to embed the video in a
        non-top-level window. In that case, the embedding window must be reparented
        to the root window **before** fullscreen mode is enabled. You will want
        to reparent it back to its normal parent when disabling fullscreen.

    :param p_mi: the media player.
    :param b_fullscreen: boolean for fullscreen status.
    """
    ...

def libvlc_set_log_verbosity(p_instance, level):  # -> Any:
    """This function does nothing.
    It is only provided for backward compatibility.

    :param p_instance: ignored.
    :param level: ignored.
    """
    ...

def libvlc_set_user_agent(p_instance, name, http):  # -> Any:
    """Sets the application *name*. LibVLC passes this as the user agent string
    when a protocol requires it.

    :param p_instance: LibVLC instance.
    :param name: human-readable application name, e.g. "FooBar player 1.2.3".
    :param http: HTTP User Agent, e.g. "FooBar/1.2.3 Python/2.6.0".

    :version: LibVLC 1.1.1 or later.
    """
    ...

def libvlc_title_descriptions_release(p_titles, i_count):  # -> Any:
    """Release a title description

    :param p_titles: title description array to release.
    :param i_count: number of title descriptions to release.

    :version: LibVLC 3.0.0 and later.
    """
    ...

def libvlc_toggle_fullscreen(p_mi):  # -> Any:
    """Toggle fullscreen status on non-embedded video outputs.

    .. warning:: The same limitations applies to this function
        as to :func:`libvlc_set_fullscreen`.

    :param p_mi: the media player.
    """
    ...

def libvlc_toggle_teletext(p_mi):  # -> Any:
    """Toggle teletext transparent status on video output.

    .. warning:: **Deprecated!** use :func:`libvlc_video_set_teletext` instead.

    :param p_mi: the media player.
    """
    ...

def libvlc_track_description_list_release(p_track_description):  # -> Any:
    """Release (free) :class:`TrackDescription`

    :param p_track_description: the structure to release.
    """
    ...

def libvlc_track_description_release(p_track_description):  # -> Any:
    """.. warning:: **Deprecated!** Use :func:`libvlc_track_description_list_release` instead."""
    ...

def libvlc_video_filter_list_get(p_instance):  # -> Any:
    """Returns a list of video filters that are available.

    See :class:`ModuleDescription`
    See :func:`libvlc_module_description_list_release`.

    :param p_instance: libvlc instance.

    :return: a list of module descriptions. It should be freed with :func:`libvlc_module_description_list_release`.
        In case of an error, None is returned.
    """
    ...

def libvlc_video_get_adjust_float(p_mi, option):  # -> Any:
    """Get float adjust *option*.

    :param p_mi: libvlc media player instance.
    :param option: adjust option to get, values of :class:`VideoAdjustOption`.

    :version: LibVLC 1.1.1 and later.
    """
    ...

def libvlc_video_get_adjust_int(p_mi, option):  # -> Any:
    """Get integer adjust *option*.

    :param p_mi: libvlc media player instance.
    :param option: adjust option to get, values of :class:`VideoAdjustOption`.

    :version: LibVLC 1.1.1 and later.
    """
    ...

def libvlc_video_get_aspect_ratio(p_mi):  # -> Any:
    """Get current video aspect ratio.

    :param p_mi: the media player.

    :return: the video aspect ratio or None if unspecified.
        (the result must be released with free() or libvlc_free).
    """
    ...

def libvlc_video_get_chapter_description(p_mi, i_title):  # -> Any:
    """Get the description of available chapters for specific title.

    :param p_mi: the media player.
    :param i_title: selected title.

    :return: list containing description of available chapter for title *i_title*.
        It must be freed with :func:`libvlc_track_description_list_release`.
    """
    ...

def libvlc_video_get_crop_geometry(p_mi):  # -> Any:
    """Get current crop filter geometry.

    :param p_mi: the media player.

    :return: the crop filter geometry or None if unset.
    """
    ...

def libvlc_video_get_cursor(p_mi, num):  # -> Any:
    """Get the mouse pointer coordinates over a video.
    Coordinates are expressed in terms of the decoded video resolution,
    **not** in terms of pixels on the screen/viewport (to get the latter,
    you can query your windowing system directly).

    Either of the coordinates may be negative or larger than the corresponding
    dimension of the video, if the cursor is outside the rendering area.

    .. warning:: The coordinates may be out-of-date if the pointer is not located
        on the video rendering area. LibVLC does not track the pointer if it is
        outside of the video widget.

    .. note:: LibVLC does not support multiple pointers (it does of course support
        multiple input devices sharing the same pointer) at the moment.

    :param p_mi: media player.
    :param num: number of the video (starting from, and most commonly 0).
    :param px: abscissa [OUT].
    :param py: ordinate [OUT].

    :return: 0 on success, -1 if the specified video does not exist.
    """
    ...

def libvlc_video_get_height(p_mi):  # -> Any:
    """Get current video height.

    .. warning:: **Deprecated!** Use :func:`libvlc_video_get_size` instead.

    :param p_mi: the media player.

    :return: the video pixel height or 0 if not applicable.
    """
    ...

def libvlc_video_get_logo_int(p_mi, option):  # -> Any:
    """Get integer logo *option*.

    :param p_mi: libvlc media player instance.
    :param option: logo option to get, values of :class:`VideoLogoOption`.
    """
    ...

def libvlc_video_get_marquee_int(p_mi, option):  # -> Any:
    """Get an integer marquee *option* value

    :param p_mi: libvlc media player.
    :param option: marq option to get See libvlc_video_marquee_int_option_t.
    """
    ...

def libvlc_video_get_marquee_string(p_mi, option):  # -> Any:
    """Get a string marquee *option* value

    :param p_mi: libvlc media player.
    :param option: marq option to get See libvlc_video_marquee_string_option_t.
    """
    ...

def libvlc_video_get_scale(p_mi):  # -> Any:
    """Get the current video scaling factor.
    See also :func:`libvlc_video_set_scale`.

    :param p_mi: the media player.

    :return: the currently configured zoom factor, or 0. if the video is set.
        to fit to the output window/drawable automatically.
    """
    ...

def libvlc_video_get_size(p_mi, num):  # -> Any:
    """Get the pixel dimensions of a video.

    :param p_mi: media player.
    :param num: number of the video (starting from, and most commonly 0).
    :param px: pixel width [OUT].
    :param py: pixel height [OUT].

    :return: 0 on success, -1 if the specified video does not exist.
    """
    ...

def libvlc_video_get_spu(p_mi):  # -> Any:
    """Get current video subtitle.

    :param p_mi: the media player.

    :return: the video subtitle selected, or -1 if none.
    """
    ...

def libvlc_video_get_spu_count(p_mi):  # -> Any:
    """Get the number of available video subtitles.

    :param p_mi: the media player.

    :return: the number of available video subtitles.
    """
    ...

def libvlc_video_get_spu_delay(p_mi):  # -> Any:
    """Get the current subtitle delay. Positive values means subtitles are being
    displayed later, negative values earlier.

    :param p_mi: media player.

    :return: time (in microseconds) the display of subtitles is being delayed.
    :version: LibVLC 2.0.0 or later.
    """
    ...

def libvlc_video_get_spu_description(p_mi):  # -> Any:
    """Get the description of available video subtitles.

    :param p_mi: the media player.

    :return: list containing description of available video subtitles.
        It must be freed with :func:`libvlc_track_description_list_release`.
    """
    ...

def libvlc_video_get_teletext(p_mi):  # -> Any:
    """Get current teletext page requested or 0 if it's disabled.

    Teletext is disabled by default, call :func:`libvlc_video_set_teletext` to enable
    it.

    :param p_mi: the media player.

    :return: the current teletext page requested.
    """
    ...

def libvlc_video_get_title_description(p_mi):  # -> Any:
    """Get the description of available titles.

    :param p_mi: the media player.

    :return: list containing description of available titles.
        It must be freed with :func:`libvlc_track_description_list_release`.
    """
    ...

def libvlc_video_get_track(p_mi):  # -> Any:
    """Get current video track.

    :param p_mi: media player.

    :return: the video track ID (int) or -1 if no active input.
    """
    ...

def libvlc_video_get_track_count(p_mi):  # -> Any:
    """Get number of available video tracks.

    :param p_mi: media player.

    :return: the number of available video tracks (int).
    """
    ...

def libvlc_video_get_track_description(p_mi):  # -> Any:
    """Get the description of available video tracks.

    :param p_mi: media player.

    :return: list with description of available video tracks, or None on error.
        It must be freed with :func:`libvlc_track_description_list_release`.
    """
    ...

def libvlc_video_get_width(p_mi):  # -> Any:
    """Get current video width.

    .. warning:: **Deprecated!** Use :func:`libvlc_video_get_size` instead.

    :param p_mi: the media player.

    :return: the video pixel width or 0 if not applicable.
    """
    ...

def libvlc_video_new_viewpoint():  # -> Any:
    """Create a video viewpoint structure.

    :return: video viewpoint or None.
        (the result must be released with free() or libvlc_free).
    :version: LibVLC 3.0.0 and later.
    """
    ...

def libvlc_video_set_adjust_float(p_mi, option, value):  # -> Any:
    """Set adjust *option* as float. Options that take a different type value
    are ignored.

    :param p_mi: libvlc media player instance.
    :param option: adust option to set, values of :class:`VideoAdjustOption`.
    :param value: adjust option value.

    :version: LibVLC 1.1.1 and later.
    """
    ...

def libvlc_video_set_adjust_int(p_mi, option, value):  # -> Any:
    """Set adjust *option* as integer. Options that take a different type value
    are ignored.
    Passing libvlc_adjust_enable as *option* *value* has the side effect of
    starting (arg !0) or stopping (arg 0) the adjust filter.

    :param p_mi: libvlc media player instance.
    :param option: adust option to set, values of :class:`VideoAdjustOption`.
    :param value: adjust option value.

    :version: LibVLC 1.1.1 and later.
    """
    ...

def libvlc_video_set_aspect_ratio(p_mi, psz_aspect):  # -> Any:
    """Set new video aspect ratio.


    .. note:: Invalid aspect ratios are ignored.

    :param p_mi: the media player.
    :param psz_aspect: new video aspect-ratio or None to reset to default.
    """
    ...

def libvlc_video_set_callbacks(mp, lock, unlock, display, opaque):  # -> Any:
    """Set callbacks and private data to render decoded video to a custom area
    in memory.
    Use :func:`libvlc_video_set_format` or :func:`libvlc_video_set_format_callbacks`
    to configure the decoded format.

    .. warning:: Rendering video into custom memory buffers is considerably less
        efficient than rendering in a custom window as normal.

    For optimal perfomances, VLC media player renders into a custom window, and
    does not use this function and associated callbacks. It is **highly
    recommended** that other LibVLC-based application do likewise.
    To embed video in a window, use libvlc_media_player_set_xid or equivalent
    depending on the operating system.

    If window embedding does not fit the application use case, then a custom
    LibVLC video output *display* plugin is required to maintain optimal video
    rendering performances.

    The following limitations affect performance:

    * Hardware video decoding acceleration will either be disabled completely,
        or require (relatively slow) copy from video/DSP memory to main memory.
    * Sub-pictures (subtitles, on-screen *display*, etc.) must be blent into the
        main picture by the CPU instead of the GPU.
    * Depending on the video format, pixel format conversion, picture scaling,
        cropping and/or picture re-orientation, must be performed by the CPU
        instead of the GPU.
    * Memory copying is required between LibVLC reference picture buffers and
        application buffers (between *lock* and *unlock* callbacks).

    :param mp: the media player.
    :param lock: callback to lock video memory (must not be None).
    :param unlock: callback to unlock video memory (or None if not needed).
    :param display: callback to display video (or None if not needed).
    :param opaque: private pointer for the three callbacks (as first parameter).

    :version: LibVLC 1.1.1 or later.
    """
    ...

def libvlc_video_set_crop_geometry(p_mi, psz_geometry):  # -> Any:
    """Set new crop filter geometry.

    :param p_mi: the media player.
    :param psz_geometry: new crop filter geometry (None to unset).
    """
    ...

def libvlc_video_set_deinterlace(p_mi, psz_mode):  # -> Any:
    """Enable or disable deinterlace filter

    :param p_mi: libvlc media player.
    :param psz_mode: type of deinterlace filter, None to disable.
    """
    ...

def libvlc_video_set_format(mp, chroma, width, height, pitch):  # -> Any:
    """Set decoded video *chroma* and dimensions.
    This only works in combination with :func:`libvlc_video_set_callbacks`,
    and is mutually exclusive with :func:`libvlc_video_set_format_callbacks`.

    :param mp: the media player.
    :param chroma: a four-characters string identifying the chroma.
        (e.g. "RV32" or "YUYV").
    :param width: pixel width.
    :param height: pixel height.
    :param pitch: line pitch (in bytes).

    :version: LibVLC 1.1.1 or later.
    :bug: All pixel planes are expected to have the same *pitch*.
        To use the YCbCr color space with chrominance subsampling,
        consider using :func:`libvlc_video_set_format_callbacks` instead.
    """
    ...

def libvlc_video_set_format_callbacks(mp, setup, cleanup):  # -> Any:
    """Set decoded video chroma and dimensions. This only works in combination with
    :func:`libvlc_video_set_callbacks`.

    :param mp: the media player.
    :param setup: callback to select the video format (cannot be None).
    :param cleanup: callback to release any allocated resources (or None).

    :version: LibVLC 2.0.0 or later.
    """
    ...

def libvlc_video_set_key_input(p_mi, on):  # -> Any:
    """Enable or disable key press events handling, according to the LibVLC hotkeys
    configuration. By default and for historical reasons, keyboard events are
    handled by the LibVLC video widget.

    .. note:: On X11, there can be only one subscriber for key press and mouse
        click events per window. If your application has subscribed to those events
        for the X window ID of the video widget, then LibVLC will not be able to
        handle key presses and mouse clicks in any case.

    .. warning:: This function is only implemented for X11 and Win32 at the moment.

    :param p_mi: the media player.
    :param on: true to handle key press events, false to ignore them.
    """
    ...

def libvlc_video_set_logo_int(p_mi, option, value):  # -> Any:
    """Set logo *option* as integer. Options that take a different type value
    are ignored.
    Passing libvlc_logo_enable as *option* *value* has the side effect of
    starting (arg !0) or stopping (arg 0) the logo filter.

    :param p_mi: libvlc media player instance.
    :param option: logo option to set, values of :class:`VideoLogoOption`.
    :param value: logo option value.
    """
    ...

def libvlc_video_set_logo_string(p_mi, option, psz_value):  # -> Any:
    """Set logo *option* as string. Options that take a different type value
    are ignored.

    :param p_mi: libvlc media player instance.
    :param option: logo option to set, values of :class:`VideoLogoOption`.
    :param psz_value: logo option value.
    """
    ...

def libvlc_video_set_marquee_int(p_mi, option, i_val):  # -> Any:
    """Enable, disable or set an integer marquee option

    Setting libvlc_marquee_Enable has the side effect of enabling (arg !0)
    or disabling (arg 0) the marq filter.

    :param p_mi: libvlc media player.
    :param option: marq option to set See libvlc_video_marquee_int_option_t.
    :param i_val: marq option value.
    """
    ...

def libvlc_video_set_marquee_string(p_mi, option, psz_text):  # -> Any:
    """Set a marquee string option

    :param p_mi: libvlc media player.
    :param option: marq option to set See libvlc_video_marquee_string_option_t.
    :param psz_text: marq option value.
    """
    ...

def libvlc_video_set_mouse_input(p_mi, on):  # -> Any:
    """Enable or disable mouse click events handling. By default, those events are
    handled. This is needed for DVD menus to work, as well as a few video
    filters such as "puzzle".

    See :func:`libvlc_video_set_key_input`.

    .. warning:: This function is only implemented for X11 and Win32 at the moment.

    :param p_mi: the media player.
    :param on: true to handle mouse click events, false to ignore them.
    """
    ...

def libvlc_video_set_scale(p_mi, f_factor):  # -> Any:
    """Set the video scaling factor. That is the ratio of the number of pixels on
    screen to the number of pixels in the original decoded video in each
    dimension. Zero is a special value; it will adjust the video to the output
    window/drawable (in windowed mode) or the entire screen.

    Note that not all video outputs support scaling.

    :param p_mi: the media player.
    :param f_factor: the scaling factor, or zero.
    """
    ...

def libvlc_video_set_spu(p_mi, i_spu):  # -> Any:
    """Set new video subtitle.

    :param p_mi: the media player.
    :param i_spu: video subtitle track to select (i_id from track description).

    :return: 0 on success, -1 if out of range.
    """
    ...

def libvlc_video_set_spu_delay(p_mi, i_delay):  # -> Any:
    """Set the subtitle delay. This affects the timing of when the subtitle will
    be displayed. Positive values result in subtitles being displayed later,
    while negative values will result in subtitles being displayed earlier.

    The subtitle delay will be reset to zero each time the media changes.

    :param p_mi: media player.
    :param i_delay: time (in microseconds) the display of subtitles should be delayed.

    :return: 0 on success, -1 on error.
    :version: LibVLC 2.0.0 or later.
    """
    ...

def libvlc_video_set_subtitle_file(p_mi, psz_subtitle):  # -> Any:
    """Set new video subtitle file.

    .. warning:: **Deprecated!** Use :func:`libvlc_media_player_add_slave` instead.

    :param p_mi: the media player.
    :param psz_subtitle: new video subtitle file.

    :return: the success status (boolean).
    """
    ...

def libvlc_video_set_teletext(p_mi, i_page):  # -> Any:
    """Set new teletext page to retrieve.

    This function can also be used to send a teletext key.

    :param p_mi: the media player.
    :param i_page: teletex page number requested. This value can be 0 to disable.
        teletext, a number in the range ]0;1000[ to show the requested page, or a.
        :class:`TeletextKey`. 100 is the default teletext page.
    """
    ...

def libvlc_video_set_track(p_mi, i_track):  # -> Any:
    """Set video track.

    :param p_mi: media player.
    :param i_track: the track ID (i_id field from track description).

    :return: 0 on success, -1 if out of range.
    """
    ...

def libvlc_video_take_snapshot(p_mi, num, psz_filepath, i_width, i_height):  # -> Any:
    """Take a snapshot of the current video window.

    If *i_width* AND *i_height* is 0, original size is used.
    If *i_width* XOR *i_height* is 0, original aspect-ratio is preserved.

    :param p_mi: media player instance.
    :param num: number of video output (typically 0 for the first/only one).
    :param psz_filepath: the path of a file or a folder to save the screenshot into.
    :param i_width: the snapshot's width.
    :param i_height: the snapshot's height.

    :return: 0 on success, -1 if the video was not found.
    """
    ...

def libvlc_video_update_viewpoint(p_mi, p_viewpoint, b_absolute):  # -> Any:
    """Update the video viewpoint information.

    .. note:: It is safe to call this function before the media player is started.

    .. note:: the values are set asynchronously, it will be used by the next frame displayed.

    :param p_mi: the media player.
    :param p_viewpoint: video viewpoint allocated via :func:`libvlc_video_new_viewpoint`.
    :param b_absolute: if true replace the old viewpoint with the new one. If.
        false, increase/decrease it.

    :return: -1 in case of error, 0 otherwise.

    :version: LibVLC 3.0.0 and later.
    """
    ...

def libvlc_vlm_add_broadcast(
    p_instance, psz_name, psz_input, psz_output, i_options, ppsz_options, b_enabled, b_loop
):  # -> Any:
    """Add a broadcast, with one input.

    :param p_instance: the instance.
    :param psz_name: the name of the new broadcast.
    :param psz_input: the input MRL.
    :param psz_output: the output MRL (the parameter to the "sout" variable).
    :param i_options: number of additional options.
    :param ppsz_options: additional options.
    :param b_enabled: boolean for enabling the new broadcast.
    :param b_loop: Should this broadcast be played in loop ?

    :return: 0 on success, -1 on error.
    """
    ...

def libvlc_vlm_add_input(p_instance, psz_name, psz_input):  # -> Any:
    """Add a media's input MRL. This will add the specified one.

    :param p_instance: the instance.
    :param psz_name: the media to work on.
    :param psz_input: the input MRL.

    :return: 0 on success, -1 on error.
    """
    ...

def libvlc_vlm_add_vod(p_instance, psz_name, psz_input, i_options, ppsz_options, b_enabled, psz_mux):  # -> Any:
    """Add a vod, with one input.

    :param p_instance: the instance.
    :param psz_name: the name of the new vod media.
    :param psz_input: the input MRL.
    :param i_options: number of additional options.
    :param ppsz_options: additional options.
    :param b_enabled: boolean for enabling the new vod.
    :param psz_mux: the muxer of the vod media.

    :return: 0 on success, -1 on error.
    """
    ...

def libvlc_vlm_change_media(
    p_instance, psz_name, psz_input, psz_output, i_options, ppsz_options, b_enabled, b_loop
):  # -> Any:
    """Edit the parameters of a media. This will delete all existing inputs and
    add the specified one.

    :param p_instance: the instance.
    :param psz_name: the name of the new broadcast.
    :param psz_input: the input MRL.
    :param psz_output: the output MRL (the parameter to the "sout" variable).
    :param i_options: number of additional options.
    :param ppsz_options: additional options.
    :param b_enabled: boolean for enabling the new broadcast.
    :param b_loop: Should this broadcast be played in loop ?

    :return: 0 on success, -1 on error.
    """
    ...

def libvlc_vlm_del_media(p_instance, psz_name):  # -> Any:
    """Delete a media (VOD or broadcast).

    :param p_instance: the instance.
    :param psz_name: the media to delete.

    :return: 0 on success, -1 on error.
    """
    ...

def libvlc_vlm_get_event_manager(p_instance):  # -> Any:
    """Get libvlc_event_manager from a vlm media.
    The p_event_manager is immutable, so you don't have to hold the lock

    :param p_instance: a libvlc instance.

    :return: libvlc_event_manager.
    """
    ...

def libvlc_vlm_get_media_instance_length(p_instance, psz_name, i_instance):  # -> Any:
    """Get vlm_media instance length by name or instance id

    :param p_instance: a libvlc instance.
    :param psz_name: name of vlm media instance.
    :param i_instance: instance id.

    :return: length of media item or -1 on error.
    """
    ...

def libvlc_vlm_get_media_instance_position(p_instance, psz_name, i_instance):  # -> Any:
    """Get vlm_media instance position by name or instance id

    :param p_instance: a libvlc instance.
    :param psz_name: name of vlm media instance.
    :param i_instance: instance id.

    :return: position as float or -1. on error.
    """
    ...

def libvlc_vlm_get_media_instance_rate(p_instance, psz_name, i_instance):  # -> Any:
    """Get vlm_media instance playback rate by name or instance id

    :param p_instance: a libvlc instance.
    :param psz_name: name of vlm media instance.
    :param i_instance: instance id.

    :return: playback rate or -1 on error.
    """
    ...

def libvlc_vlm_get_media_instance_time(p_instance, psz_name, i_instance):  # -> Any:
    """Get vlm_media instance time by name or instance id

    :param p_instance: a libvlc instance.
    :param psz_name: name of vlm media instance.
    :param i_instance: instance id.

    :return: time as integer or -1 on error.
    """
    ...

def libvlc_vlm_pause_media(p_instance, psz_name):  # -> Any:
    """Pause the named broadcast.

    :param p_instance: the instance.
    :param psz_name: the name of the broadcast.

    :return: 0 on success, -1 on error.
    """
    ...

def libvlc_vlm_play_media(p_instance, psz_name):  # -> Any:
    """Play the named broadcast.

    :param p_instance: the instance.
    :param psz_name: the name of the broadcast.

    :return: 0 on success, -1 on error.
    """
    ...

def libvlc_vlm_release(p_instance):  # -> Any:
    """Release the vlm instance related to the given :class:`Instance`

    :param p_instance: the instance.
    """
    ...

def libvlc_vlm_seek_media(p_instance, psz_name, f_percentage):  # -> Any:
    """Seek in the named broadcast.

    :param p_instance: the instance.
    :param psz_name: the name of the broadcast.
    :param f_percentage: the percentage to seek to.

    :return: 0 on success, -1 on error.
    """
    ...

def libvlc_vlm_set_enabled(p_instance, psz_name, b_enabled):  # -> Any:
    """Enable or disable a media (VOD or broadcast).

    :param p_instance: the instance.
    :param psz_name: the media to work on.
    :param b_enabled: the new status.

    :return: 0 on success, -1 on error.
    """
    ...

def libvlc_vlm_set_input(p_instance, psz_name, psz_input):  # -> Any:
    """Set a media's input MRL. This will delete all existing inputs and
    add the specified one.

    :param p_instance: the instance.
    :param psz_name: the media to work on.
    :param psz_input: the input MRL.

    :return: 0 on success, -1 on error.
    """
    ...

def libvlc_vlm_set_loop(p_instance, psz_name, b_loop):  # -> Any:
    """Set a media's loop status.

    :param p_instance: the instance.
    :param psz_name: the media to work on.
    :param b_loop: the new status.

    :return: 0 on success, -1 on error.
    """
    ...

def libvlc_vlm_set_mux(p_instance, psz_name, psz_mux):  # -> Any:
    """Set a media's vod muxer.

    :param p_instance: the instance.
    :param psz_name: the media to work on.
    :param psz_mux: the new muxer.

    :return: 0 on success, -1 on error.
    """
    ...

def libvlc_vlm_set_output(p_instance, psz_name, psz_output):  # -> Any:
    """Set the output for a media.

    :param p_instance: the instance.
    :param psz_name: the media to work on.
    :param psz_output: the output MRL (the parameter to the "sout" variable).

    :return: 0 on success, -1 on error.
    """
    ...

def libvlc_vlm_show_media(p_instance, psz_name):  # -> Any:
    """Return information about the named media as a JSON
    string representation.

    This function is mainly intended for debugging use,
    if you want programmatic access to the state of
    a vlm_media_instance_t, please use the corresponding
    libvlc_vlm_get_media_instance_xxx -functions.
    Currently there are no such functions available for
    vlm_media_t though.

    :param p_instance: the instance.
    :param psz_name: the name of the media,
        if the name is an empty string, all media is described.

    :return: string with information about named media, or None on error.
    """
    ...

def libvlc_vlm_stop_media(p_instance, psz_name):  # -> Any:
    """Stop the named broadcast.

    :param p_instance: the instance.
    :param psz_name: the name of the broadcast.

    :return: 0 on success, -1 on error.
    """
    ...

def libvlc_vprinterr(fmt, ap):  # -> Any:
    """Sets the LibVLC error status and message for the current thread.
    Any previous error is overridden.

    :param fmt: the format string.
    :param ap: the arguments.

    :return: a nul terminated string in any case.
    """
    ...

def libvlc_wait(p_instance):  # -> Any:
    """Waits until an interface causes the instance to exit.
    You should start at least one interface first, using :func:`libvlc_add_intf`.

    .. warning:: This function wastes one thread doing basically nothing.
        :func:`libvlc_set_exit_handler` should be used instead.

    :param p_instance: the instance.
    """
    ...

def callbackmethod(callback):
    """Now obsolete ``@callbackmethod`` decorator."""
    ...

if not hasattr(dll, "libvlc_free"):
    libc_path = ...

def hex_version():  # -> int:
    """Return the version of these bindings in hex or 0 if unavailable."""
    ...

def libvlc_hex_version():  # -> int:
    """Return the libvlc version in hex or 0 if unavailable."""
    ...

def debug_callback(event, *args, **kwds):  # -> None:
    """Example callback, useful for debugging."""
    ...

def print_python():  # -> None:
    ...
def print_version():  # -> None:
    """Print version of this vlc.py and of the libvlc"""
    ...

if __name__ == "__main__":
    def end_callback(event): ...

    echo_position = ...
    def pos_callback(event, player):  # -> None:
        ...
